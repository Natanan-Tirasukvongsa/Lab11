
Lab11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004824  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080049bc  080049bc  000149bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049d4  080049d4  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  080049d4  080049d4  000149d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080049dc  080049dc  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049dc  080049dc  000149dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049e0  080049e0  000149e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  080049e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  20000024  08004a08  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  08004a08  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009fbb  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000185d  00000000  00000000  0002a00f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000990  00000000  00000000  0002b870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000930  00000000  00000000  0002c200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014f44  00000000  00000000  0002cb30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b12a  00000000  00000000  00041a74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083d5f  00000000  00000000  0004cb9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d08fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027b4  00000000  00000000  000d0950  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000024 	.word	0x20000024
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080049a4 	.word	0x080049a4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000028 	.word	0x20000028
 80001d4:	080049a4 	.word	0x080049a4

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d6:	f000 fbfd 	bl	8000cd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004da:	f000 f8a7 	bl	800062c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004de:	f000 f967 	bl	80007b0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004e2:	f000 f93b 	bl	800075c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80004e6:	f000 f90b 	bl	8000700 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  //delay ตอนเริ่มเนื่องจา�? ioexpender restart ไปพร้อมๆ�?ับเวลาที่�?ด reset
  //ใช้เวลาเล็�?น้อยใน�?าร ตั้งค่าตัดเอง
  HAL_Delay(100);
 80004ea:	2064      	movs	r0, #100	; 0x64
 80004ec:	f000 fc64 	bl	8000db8 <HAL_Delay>
  //initial
  IOExpenderInit();
 80004f0:	f000 fa3c 	bl	800096c <IOExpenderInit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_I2C_Master_Transmit(&hi2c1, (0x23<<1),(uint8_t*)0x45 , 1, 200);
 80004f4:	23c8      	movs	r3, #200	; 0xc8
 80004f6:	9300      	str	r3, [sp, #0]
 80004f8:	2301      	movs	r3, #1
 80004fa:	2245      	movs	r2, #69	; 0x45
 80004fc:	2146      	movs	r1, #70	; 0x46
 80004fe:	483d      	ldr	r0, [pc, #244]	; (80005f4 <main+0x124>)
 8000500:	f001 f8de 	bl	80016c0 <HAL_I2C_Master_Transmit>

	  button[0]= HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8000504:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000508:	483b      	ldr	r0, [pc, #236]	; (80005f8 <main+0x128>)
 800050a:	f000 ff3f 	bl	800138c <HAL_GPIO_ReadPin>
 800050e:	4603      	mov	r3, r0
 8000510:	461a      	mov	r2, r3
 8000512:	4b3a      	ldr	r3, [pc, #232]	; (80005fc <main+0x12c>)
 8000514:	701a      	strb	r2, [r3, #0]


	  if(button[1]==GPIO_PIN_SET
 8000516:	4b39      	ldr	r3, [pc, #228]	; (80005fc <main+0x12c>)
 8000518:	785b      	ldrb	r3, [r3, #1]
 800051a:	2b01      	cmp	r3, #1
 800051c:	d116      	bne.n	800054c <main+0x7c>
	  	  	&& button[0]==GPIO_PIN_RESET && press ==0) //if press button
 800051e:	4b37      	ldr	r3, [pc, #220]	; (80005fc <main+0x12c>)
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	2b00      	cmp	r3, #0
 8000524:	d112      	bne.n	800054c <main+0x7c>
 8000526:	4b36      	ldr	r3, [pc, #216]	; (8000600 <main+0x130>)
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	2b00      	cmp	r3, #0
 800052c:	d10e      	bne.n	800054c <main+0x7c>
	  {
		  IOExpdrExampleWriteFlag = 0;
 800052e:	4b35      	ldr	r3, [pc, #212]	; (8000604 <main+0x134>)
 8000530:	2200      	movs	r2, #0
 8000532:	701a      	strb	r2, [r3, #0]
		  IOExpdrExampleReadFlag = 1;
 8000534:	4b34      	ldr	r3, [pc, #208]	; (8000608 <main+0x138>)
 8000536:	2201      	movs	r2, #1
 8000538:	701a      	strb	r2, [r3, #0]
		  eepromExampleWriteFlag = 1;
 800053a:	4b34      	ldr	r3, [pc, #208]	; (800060c <main+0x13c>)
 800053c:	2201      	movs	r2, #1
 800053e:	701a      	strb	r2, [r3, #0]
		  eepromExampleReadFlag = 0;
 8000540:	4b33      	ldr	r3, [pc, #204]	; (8000610 <main+0x140>)
 8000542:	2200      	movs	r2, #0
 8000544:	701a      	strb	r2, [r3, #0]
		  press = 1;
 8000546:	4b2e      	ldr	r3, [pc, #184]	; (8000600 <main+0x130>)
 8000548:	2201      	movs	r2, #1
 800054a:	701a      	strb	r2, [r3, #0]
	  }

	  if(button[1]==GPIO_PIN_RESET
 800054c:	4b2b      	ldr	r3, [pc, #172]	; (80005fc <main+0x12c>)
 800054e:	785b      	ldrb	r3, [r3, #1]
 8000550:	2b00      	cmp	r3, #0
 8000552:	d116      	bne.n	8000582 <main+0xb2>
	  	  	  	&& button[0]==GPIO_PIN_SET && press ==1) //if press button
 8000554:	4b29      	ldr	r3, [pc, #164]	; (80005fc <main+0x12c>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	2b01      	cmp	r3, #1
 800055a:	d112      	bne.n	8000582 <main+0xb2>
 800055c:	4b28      	ldr	r3, [pc, #160]	; (8000600 <main+0x130>)
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	2b01      	cmp	r3, #1
 8000562:	d10e      	bne.n	8000582 <main+0xb2>
	  	  {
	  		  IOExpdrExampleWriteFlag = 1;
 8000564:	4b27      	ldr	r3, [pc, #156]	; (8000604 <main+0x134>)
 8000566:	2201      	movs	r2, #1
 8000568:	701a      	strb	r2, [r3, #0]
	  		  IOExpdrExampleReadFlag = 0;
 800056a:	4b27      	ldr	r3, [pc, #156]	; (8000608 <main+0x138>)
 800056c:	2200      	movs	r2, #0
 800056e:	701a      	strb	r2, [r3, #0]
	  		  eepromExampleWriteFlag = 0;
 8000570:	4b26      	ldr	r3, [pc, #152]	; (800060c <main+0x13c>)
 8000572:	2200      	movs	r2, #0
 8000574:	701a      	strb	r2, [r3, #0]
	  		  eepromExampleReadFlag = 1;
 8000576:	4b26      	ldr	r3, [pc, #152]	; (8000610 <main+0x140>)
 8000578:	2201      	movs	r2, #1
 800057a:	701a      	strb	r2, [r3, #0]
	  		  press = 0;
 800057c:	4b20      	ldr	r3, [pc, #128]	; (8000600 <main+0x130>)
 800057e:	2200      	movs	r2, #0
 8000580:	701a      	strb	r2, [r3, #0]
	  	  }
	  IOExpenderReadPinA(&IOExpdrDataReadBack);
 8000582:	4824      	ldr	r0, [pc, #144]	; (8000614 <main+0x144>)
 8000584:	f000 fa08 	bl	8000998 <IOExpenderReadPinA>
	 //	  led_read = IOExpdrDataReadBack<<4;
	 //	  IOExpdrDataWrite = IOExpdrDataReadBack&0b00001111;
	 	  D_4 = (IOExpdrDataReadBack&0b1000)>>3;
 8000588:	4b22      	ldr	r3, [pc, #136]	; (8000614 <main+0x144>)
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	10db      	asrs	r3, r3, #3
 800058e:	b2db      	uxtb	r3, r3
 8000590:	f003 0301 	and.w	r3, r3, #1
 8000594:	b2da      	uxtb	r2, r3
 8000596:	4b20      	ldr	r3, [pc, #128]	; (8000618 <main+0x148>)
 8000598:	701a      	strb	r2, [r3, #0]
	 	  D_3 = (IOExpdrDataReadBack&0b0100)>>2;
 800059a:	4b1e      	ldr	r3, [pc, #120]	; (8000614 <main+0x144>)
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	109b      	asrs	r3, r3, #2
 80005a0:	b2db      	uxtb	r3, r3
 80005a2:	f003 0301 	and.w	r3, r3, #1
 80005a6:	b2da      	uxtb	r2, r3
 80005a8:	4b1c      	ldr	r3, [pc, #112]	; (800061c <main+0x14c>)
 80005aa:	701a      	strb	r2, [r3, #0]
	 	  D_2 = (IOExpdrDataReadBack&0b0010)>>1;
 80005ac:	4b19      	ldr	r3, [pc, #100]	; (8000614 <main+0x144>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	105b      	asrs	r3, r3, #1
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	f003 0301 	and.w	r3, r3, #1
 80005b8:	b2da      	uxtb	r2, r3
 80005ba:	4b19      	ldr	r3, [pc, #100]	; (8000620 <main+0x150>)
 80005bc:	701a      	strb	r2, [r3, #0]
	 	  D_1 = (IOExpdrDataReadBack&0b0001);
 80005be:	4b15      	ldr	r3, [pc, #84]	; (8000614 <main+0x144>)
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	f003 0301 	and.w	r3, r3, #1
 80005c6:	b2da      	uxtb	r2, r3
 80005c8:	4b16      	ldr	r3, [pc, #88]	; (8000624 <main+0x154>)
 80005ca:	701a      	strb	r2, [r3, #0]
	 	  EEPROMWriteExample();
 80005cc:	f000 f968 	bl	80008a0 <EEPROMWriteExample>
	 	  IOExpenderWritePinB(IOExpdrDataReadBack&0b1111);
 80005d0:	4b10      	ldr	r3, [pc, #64]	; (8000614 <main+0x144>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	f003 030f 	and.w	r3, r3, #15
 80005d8:	b2db      	uxtb	r3, r3
 80005da:	4618      	mov	r0, r3
 80005dc:	f000 fa00 	bl	80009e0 <IOExpenderWritePinB>
	 	  	  	   //เ�?็บค่าใน  eepromDataReadBack
	 	  EEPROMReadExample(eepromDataReadBack, 4);
 80005e0:	2104      	movs	r1, #4
 80005e2:	4811      	ldr	r0, [pc, #68]	; (8000628 <main+0x158>)
 80005e4:	f000 f99a 	bl	800091c <EEPROMReadExample>
	  button[1] = button[0];
 80005e8:	4b04      	ldr	r3, [pc, #16]	; (80005fc <main+0x12c>)
 80005ea:	781a      	ldrb	r2, [r3, #0]
 80005ec:	4b03      	ldr	r3, [pc, #12]	; (80005fc <main+0x12c>)
 80005ee:	705a      	strb	r2, [r3, #1]
	  HAL_I2C_Master_Transmit(&hi2c1, (0x23<<1),(uint8_t*)0x45 , 1, 200);
 80005f0:	e780      	b.n	80004f4 <main+0x24>
 80005f2:	bf00      	nop
 80005f4:	20000054 	.word	0x20000054
 80005f8:	40020800 	.word	0x40020800
 80005fc:	20000048 	.word	0x20000048
 8000600:	2000004a 	.word	0x2000004a
 8000604:	20000042 	.word	0x20000042
 8000608:	20000043 	.word	0x20000043
 800060c:	20000040 	.word	0x20000040
 8000610:	20000041 	.word	0x20000041
 8000614:	200000a8 	.word	0x200000a8
 8000618:	20000047 	.word	0x20000047
 800061c:	20000046 	.word	0x20000046
 8000620:	20000045 	.word	0x20000045
 8000624:	20000044 	.word	0x20000044
 8000628:	200000ac 	.word	0x200000ac

0800062c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b094      	sub	sp, #80	; 0x50
 8000630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000632:	f107 0320 	add.w	r3, r7, #32
 8000636:	2230      	movs	r2, #48	; 0x30
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f004 f9aa 	bl	8004994 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000640:	f107 030c 	add.w	r3, r7, #12
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
 800064e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000650:	2300      	movs	r3, #0
 8000652:	60bb      	str	r3, [r7, #8]
 8000654:	4b28      	ldr	r3, [pc, #160]	; (80006f8 <SystemClock_Config+0xcc>)
 8000656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000658:	4a27      	ldr	r2, [pc, #156]	; (80006f8 <SystemClock_Config+0xcc>)
 800065a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800065e:	6413      	str	r3, [r2, #64]	; 0x40
 8000660:	4b25      	ldr	r3, [pc, #148]	; (80006f8 <SystemClock_Config+0xcc>)
 8000662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000664:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000668:	60bb      	str	r3, [r7, #8]
 800066a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800066c:	2300      	movs	r3, #0
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	4b22      	ldr	r3, [pc, #136]	; (80006fc <SystemClock_Config+0xd0>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a21      	ldr	r2, [pc, #132]	; (80006fc <SystemClock_Config+0xd0>)
 8000676:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800067a:	6013      	str	r3, [r2, #0]
 800067c:	4b1f      	ldr	r3, [pc, #124]	; (80006fc <SystemClock_Config+0xd0>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000684:	607b      	str	r3, [r7, #4]
 8000686:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000688:	2302      	movs	r3, #2
 800068a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800068c:	2301      	movs	r3, #1
 800068e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000690:	2310      	movs	r3, #16
 8000692:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000694:	2302      	movs	r3, #2
 8000696:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000698:	2300      	movs	r3, #0
 800069a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800069c:	2310      	movs	r3, #16
 800069e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006a0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006a4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006a6:	2304      	movs	r3, #4
 80006a8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006aa:	2304      	movs	r3, #4
 80006ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ae:	f107 0320 	add.w	r3, r7, #32
 80006b2:	4618      	mov	r0, r3
 80006b4:	f003 fac0 	bl	8003c38 <HAL_RCC_OscConfig>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006be:	f000 f9b9 	bl	8000a34 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c2:	230f      	movs	r3, #15
 80006c4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c6:	2302      	movs	r3, #2
 80006c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ca:	2300      	movs	r3, #0
 80006cc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006d8:	f107 030c 	add.w	r3, r7, #12
 80006dc:	2102      	movs	r1, #2
 80006de:	4618      	mov	r0, r3
 80006e0:	f003 fd22 	bl	8004128 <HAL_RCC_ClockConfig>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006ea:	f000 f9a3 	bl	8000a34 <Error_Handler>
  }
}
 80006ee:	bf00      	nop
 80006f0:	3750      	adds	r7, #80	; 0x50
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	40023800 	.word	0x40023800
 80006fc:	40007000 	.word	0x40007000

08000700 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000704:	4b12      	ldr	r3, [pc, #72]	; (8000750 <MX_I2C1_Init+0x50>)
 8000706:	4a13      	ldr	r2, [pc, #76]	; (8000754 <MX_I2C1_Init+0x54>)
 8000708:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800070a:	4b11      	ldr	r3, [pc, #68]	; (8000750 <MX_I2C1_Init+0x50>)
 800070c:	4a12      	ldr	r2, [pc, #72]	; (8000758 <MX_I2C1_Init+0x58>)
 800070e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000710:	4b0f      	ldr	r3, [pc, #60]	; (8000750 <MX_I2C1_Init+0x50>)
 8000712:	2200      	movs	r2, #0
 8000714:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000716:	4b0e      	ldr	r3, [pc, #56]	; (8000750 <MX_I2C1_Init+0x50>)
 8000718:	2200      	movs	r2, #0
 800071a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800071c:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <MX_I2C1_Init+0x50>)
 800071e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000722:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000724:	4b0a      	ldr	r3, [pc, #40]	; (8000750 <MX_I2C1_Init+0x50>)
 8000726:	2200      	movs	r2, #0
 8000728:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800072a:	4b09      	ldr	r3, [pc, #36]	; (8000750 <MX_I2C1_Init+0x50>)
 800072c:	2200      	movs	r2, #0
 800072e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000730:	4b07      	ldr	r3, [pc, #28]	; (8000750 <MX_I2C1_Init+0x50>)
 8000732:	2200      	movs	r2, #0
 8000734:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000736:	4b06      	ldr	r3, [pc, #24]	; (8000750 <MX_I2C1_Init+0x50>)
 8000738:	2200      	movs	r2, #0
 800073a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800073c:	4804      	ldr	r0, [pc, #16]	; (8000750 <MX_I2C1_Init+0x50>)
 800073e:	f000 fe7b 	bl	8001438 <HAL_I2C_Init>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000748:	f000 f974 	bl	8000a34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800074c:	bf00      	nop
 800074e:	bd80      	pop	{r7, pc}
 8000750:	20000054 	.word	0x20000054
 8000754:	40005400 	.word	0x40005400
 8000758:	00061a80 	.word	0x00061a80

0800075c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000760:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <MX_USART2_UART_Init+0x4c>)
 8000762:	4a12      	ldr	r2, [pc, #72]	; (80007ac <MX_USART2_UART_Init+0x50>)
 8000764:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000766:	4b10      	ldr	r3, [pc, #64]	; (80007a8 <MX_USART2_UART_Init+0x4c>)
 8000768:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800076c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800076e:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <MX_USART2_UART_Init+0x4c>)
 8000770:	2200      	movs	r2, #0
 8000772:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000774:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <MX_USART2_UART_Init+0x4c>)
 8000776:	2200      	movs	r2, #0
 8000778:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800077a:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <MX_USART2_UART_Init+0x4c>)
 800077c:	2200      	movs	r2, #0
 800077e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000780:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <MX_USART2_UART_Init+0x4c>)
 8000782:	220c      	movs	r2, #12
 8000784:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000786:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <MX_USART2_UART_Init+0x4c>)
 8000788:	2200      	movs	r2, #0
 800078a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800078c:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <MX_USART2_UART_Init+0x4c>)
 800078e:	2200      	movs	r2, #0
 8000790:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000792:	4805      	ldr	r0, [pc, #20]	; (80007a8 <MX_USART2_UART_Init+0x4c>)
 8000794:	f003 fec4 	bl	8004520 <HAL_UART_Init>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800079e:	f000 f949 	bl	8000a34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	200000b0 	.word	0x200000b0
 80007ac:	40004400 	.word	0x40004400

080007b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b08a      	sub	sp, #40	; 0x28
 80007b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b6:	f107 0314 	add.w	r3, r7, #20
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
 80007c0:	609a      	str	r2, [r3, #8]
 80007c2:	60da      	str	r2, [r3, #12]
 80007c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	613b      	str	r3, [r7, #16]
 80007ca:	4b31      	ldr	r3, [pc, #196]	; (8000890 <MX_GPIO_Init+0xe0>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a30      	ldr	r2, [pc, #192]	; (8000890 <MX_GPIO_Init+0xe0>)
 80007d0:	f043 0304 	orr.w	r3, r3, #4
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b2e      	ldr	r3, [pc, #184]	; (8000890 <MX_GPIO_Init+0xe0>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0304 	and.w	r3, r3, #4
 80007de:	613b      	str	r3, [r7, #16]
 80007e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	60fb      	str	r3, [r7, #12]
 80007e6:	4b2a      	ldr	r3, [pc, #168]	; (8000890 <MX_GPIO_Init+0xe0>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a29      	ldr	r2, [pc, #164]	; (8000890 <MX_GPIO_Init+0xe0>)
 80007ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b27      	ldr	r3, [pc, #156]	; (8000890 <MX_GPIO_Init+0xe0>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007fa:	60fb      	str	r3, [r7, #12]
 80007fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	60bb      	str	r3, [r7, #8]
 8000802:	4b23      	ldr	r3, [pc, #140]	; (8000890 <MX_GPIO_Init+0xe0>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a22      	ldr	r2, [pc, #136]	; (8000890 <MX_GPIO_Init+0xe0>)
 8000808:	f043 0301 	orr.w	r3, r3, #1
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b20      	ldr	r3, [pc, #128]	; (8000890 <MX_GPIO_Init+0xe0>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0301 	and.w	r3, r3, #1
 8000816:	60bb      	str	r3, [r7, #8]
 8000818:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	607b      	str	r3, [r7, #4]
 800081e:	4b1c      	ldr	r3, [pc, #112]	; (8000890 <MX_GPIO_Init+0xe0>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a1b      	ldr	r2, [pc, #108]	; (8000890 <MX_GPIO_Init+0xe0>)
 8000824:	f043 0302 	orr.w	r3, r3, #2
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b19      	ldr	r3, [pc, #100]	; (8000890 <MX_GPIO_Init+0xe0>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0302 	and.w	r3, r3, #2
 8000832:	607b      	str	r3, [r7, #4]
 8000834:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000836:	2200      	movs	r2, #0
 8000838:	2120      	movs	r1, #32
 800083a:	4816      	ldr	r0, [pc, #88]	; (8000894 <MX_GPIO_Init+0xe4>)
 800083c:	f000 fdbe 	bl	80013bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000840:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000844:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000846:	4b14      	ldr	r3, [pc, #80]	; (8000898 <MX_GPIO_Init+0xe8>)
 8000848:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800084a:	2301      	movs	r3, #1
 800084c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800084e:	f107 0314 	add.w	r3, r7, #20
 8000852:	4619      	mov	r1, r3
 8000854:	4811      	ldr	r0, [pc, #68]	; (800089c <MX_GPIO_Init+0xec>)
 8000856:	f000 fc15 	bl	8001084 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800085a:	2320      	movs	r3, #32
 800085c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085e:	2301      	movs	r3, #1
 8000860:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	2300      	movs	r3, #0
 8000864:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000866:	2300      	movs	r3, #0
 8000868:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800086a:	f107 0314 	add.w	r3, r7, #20
 800086e:	4619      	mov	r1, r3
 8000870:	4808      	ldr	r0, [pc, #32]	; (8000894 <MX_GPIO_Init+0xe4>)
 8000872:	f000 fc07 	bl	8001084 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000876:	2200      	movs	r2, #0
 8000878:	2100      	movs	r1, #0
 800087a:	2028      	movs	r0, #40	; 0x28
 800087c:	f000 fb9b 	bl	8000fb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000880:	2028      	movs	r0, #40	; 0x28
 8000882:	f000 fbb4 	bl	8000fee <HAL_NVIC_EnableIRQ>

}
 8000886:	bf00      	nop
 8000888:	3728      	adds	r7, #40	; 0x28
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	40023800 	.word	0x40023800
 8000894:	40020000 	.word	0x40020000
 8000898:	10310000 	.word	0x10310000
 800089c:	40020800 	.word	0x40020800

080008a0 <EEPROMWriteExample>:

/* USER CODE BEGIN 4 */
//�?ารเขียน eeprom
static uint8_t data[4];
void EEPROMWriteExample() {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af02      	add	r7, sp, #8
	//flag = 1 && I2C ready
	if (eepromExampleWriteFlag && hi2c1.State == HAL_I2C_STATE_READY) {
 80008a6:	4b16      	ldr	r3, [pc, #88]	; (8000900 <EEPROMWriteExample+0x60>)
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d025      	beq.n	80008fa <EEPROMWriteExample+0x5a>
 80008ae:	4b15      	ldr	r3, [pc, #84]	; (8000904 <EEPROMWriteExample+0x64>)
 80008b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	2b20      	cmp	r3, #32
 80008b8:	d11f      	bne.n	80008fa <EEPROMWriteExample+0x5a>

		//ข้อมูลที่จเขียนใน eeprom
		//ข้อระวัง I2C ทำงาน �?บบ IT //ต้องมั่นใจว่า data ไม่เปลี่ยน�?ปลงไประหว่างที่เขียน
		//ใส่ static เผื่อเ�?็บค่า หลังจา�?จบฟัง�?์ชันยังคงรั�?ษา data

		data[0] = D_1;
 80008ba:	4b13      	ldr	r3, [pc, #76]	; (8000908 <EEPROMWriteExample+0x68>)
 80008bc:	781a      	ldrb	r2, [r3, #0]
 80008be:	4b13      	ldr	r3, [pc, #76]	; (800090c <EEPROMWriteExample+0x6c>)
 80008c0:	701a      	strb	r2, [r3, #0]
		data[1] = D_2;
 80008c2:	4b13      	ldr	r3, [pc, #76]	; (8000910 <EEPROMWriteExample+0x70>)
 80008c4:	781a      	ldrb	r2, [r3, #0]
 80008c6:	4b11      	ldr	r3, [pc, #68]	; (800090c <EEPROMWriteExample+0x6c>)
 80008c8:	705a      	strb	r2, [r3, #1]
		data[2] = D_3;
 80008ca:	4b12      	ldr	r3, [pc, #72]	; (8000914 <EEPROMWriteExample+0x74>)
 80008cc:	781a      	ldrb	r2, [r3, #0]
 80008ce:	4b0f      	ldr	r3, [pc, #60]	; (800090c <EEPROMWriteExample+0x6c>)
 80008d0:	709a      	strb	r2, [r3, #2]
		data[3] = D_4;
 80008d2:	4b11      	ldr	r3, [pc, #68]	; (8000918 <EEPROMWriteExample+0x78>)
 80008d4:	781a      	ldrb	r2, [r3, #0]
 80008d6:	4b0d      	ldr	r3, [pc, #52]	; (800090c <EEPROMWriteExample+0x6c>)
 80008d8:	70da      	strb	r2, [r3, #3]
		//write memory
		//Memaddress = ตำ�?หน่งภายใน eeprom ที่ต้อง�?ารเขียน  0x20 //เลขที่ตัวเอง
		//high & low byte = 16bits ตำ�?หน่งใน eeprom
		HAL_I2C_Mem_Write_IT(&hi2c1, EEPROM_ADDR, 0x20, I2C_MEMADD_SIZE_16BIT,
 80008da:	2304      	movs	r3, #4
 80008dc:	9301      	str	r3, [sp, #4]
 80008de:	4b0b      	ldr	r3, [pc, #44]	; (800090c <EEPROMWriteExample+0x6c>)
 80008e0:	9300      	str	r3, [sp, #0]
 80008e2:	2310      	movs	r3, #16
 80008e4:	2220      	movs	r2, #32
 80008e6:	21a0      	movs	r1, #160	; 0xa0
 80008e8:	4806      	ldr	r0, [pc, #24]	; (8000904 <EEPROMWriteExample+0x64>)
 80008ea:	f001 f8e1 	bl	8001ab0 <HAL_I2C_Mem_Write_IT>
				data, 4);

		HAL_Delay(10);
 80008ee:	200a      	movs	r0, #10
 80008f0:	f000 fa62 	bl	8000db8 <HAL_Delay>
		//set flag = 0 //ทำงานครั้งเดียว
		eepromExampleWriteFlag = 0;
 80008f4:	4b02      	ldr	r3, [pc, #8]	; (8000900 <EEPROMWriteExample+0x60>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	701a      	strb	r2, [r3, #0]

	}
}
 80008fa:	bf00      	nop
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	20000040 	.word	0x20000040
 8000904:	20000054 	.word	0x20000054
 8000908:	20000044 	.word	0x20000044
 800090c:	2000004c 	.word	0x2000004c
 8000910:	20000045 	.word	0x20000045
 8000914:	20000046 	.word	0x20000046
 8000918:	20000047 	.word	0x20000047

0800091c <EEPROMReadExample>:
void EEPROMReadExample(uint8_t *Rdata, uint16_t len) {
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af02      	add	r7, sp, #8
 8000922:	6078      	str	r0, [r7, #4]
 8000924:	460b      	mov	r3, r1
 8000926:	807b      	strh	r3, [r7, #2]
	if (eepromExampleReadFlag && hi2c1.State == HAL_I2C_STATE_READY) {
 8000928:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <EEPROMReadExample+0x48>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d015      	beq.n	800095c <EEPROMReadExample+0x40>
 8000930:	4b0d      	ldr	r3, [pc, #52]	; (8000968 <EEPROMReadExample+0x4c>)
 8000932:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000936:	b2db      	uxtb	r3, r3
 8000938:	2b20      	cmp	r3, #32
 800093a:	d10f      	bne.n	800095c <EEPROMReadExample+0x40>

		//read
		HAL_I2C_Mem_Read_IT(&hi2c1, EEPROM_ADDR, 0x20, I2C_MEMADD_SIZE_16BIT,
 800093c:	887b      	ldrh	r3, [r7, #2]
 800093e:	9301      	str	r3, [sp, #4]
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	9300      	str	r3, [sp, #0]
 8000944:	2310      	movs	r3, #16
 8000946:	2220      	movs	r2, #32
 8000948:	21a0      	movs	r1, #160	; 0xa0
 800094a:	4807      	ldr	r0, [pc, #28]	; (8000968 <EEPROMReadExample+0x4c>)
 800094c:	f001 f962 	bl	8001c14 <HAL_I2C_Mem_Read_IT>
				Rdata, len);
		HAL_Delay(10);
 8000950:	200a      	movs	r0, #10
 8000952:	f000 fa31 	bl	8000db8 <HAL_Delay>
		eepromExampleReadFlag = 0;
 8000956:	4b03      	ldr	r3, [pc, #12]	; (8000964 <EEPROMReadExample+0x48>)
 8000958:	2200      	movs	r2, #0
 800095a:	701a      	strb	r2, [r3, #0]

	}
}
 800095c:	bf00      	nop
 800095e:	3708      	adds	r7, #8
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	20000041 	.word	0x20000041
 8000968:	20000054 	.word	0x20000054

0800096c <IOExpenderInit>:
void IOExpenderInit() {
 800096c:	b580      	push	{r7, lr}
 800096e:	b084      	sub	sp, #16
 8000970:	af04      	add	r7, sp, #16
	//อยู่ในรูป�?บบ initial write
	//ถู�?เรีย�?ครั้ง�?ร�?ตอนเปิด controller
	//เวลา�?ดปุ่ม reset = Nrst จะดึงขานี้ลง หลังจา�?นั้นจะ reset ค่าทั้งหมดในนี้
	//address 8 bit
	//ตำ�?หน่ง IODIRA = 0x00
	HAL_I2C_Mem_Write(&hi2c1, IOEXPD_ADDR, 0x00, I2C_MEMADD_SIZE_8BIT, Setting,
 8000972:	2364      	movs	r3, #100	; 0x64
 8000974:	9302      	str	r3, [sp, #8]
 8000976:	2316      	movs	r3, #22
 8000978:	9301      	str	r3, [sp, #4]
 800097a:	4b05      	ldr	r3, [pc, #20]	; (8000990 <IOExpenderInit+0x24>)
 800097c:	9300      	str	r3, [sp, #0]
 800097e:	2301      	movs	r3, #1
 8000980:	2200      	movs	r2, #0
 8000982:	2140      	movs	r1, #64	; 0x40
 8000984:	4803      	ldr	r0, [pc, #12]	; (8000994 <IOExpenderInit+0x28>)
 8000986:	f000 ff99 	bl	80018bc <HAL_I2C_Mem_Write>
			0x16, 100);
}
 800098a:	bf00      	nop
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	20000000 	.word	0x20000000
 8000994:	20000054 	.word	0x20000054

08000998 <IOExpenderReadPinA>:
//ข้อมูลที่อ่านเขียนสามารถเ�?็บค่า �?ละ �?สดง�?ารทำงาน ควบคุม  Gpio �?ต่ละช่อง
//IOIDR �?ำหนด output �?ต่ละช่อง
//gpio = reflec logic level ของ�?ต่ลช่อง
//�?ารเขียนข้อมูลใน emory ของ IOexpender �?ต่ memory ไปควบคุม�?ารทำงานต่าง ๆ ใน IOExpender
//ทำงานเหมือน eeprom
void IOExpenderReadPinA(uint8_t *Rdata) {
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af02      	add	r7, sp, #8
 800099e:	6078      	str	r0, [r7, #4]
	if (IOExpdrExampleReadFlag && hi2c1.State == HAL_I2C_STATE_READY) {
 80009a0:	4b0d      	ldr	r3, [pc, #52]	; (80009d8 <IOExpenderReadPinA+0x40>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d012      	beq.n	80009ce <IOExpenderReadPinA+0x36>
 80009a8:	4b0c      	ldr	r3, [pc, #48]	; (80009dc <IOExpenderReadPinA+0x44>)
 80009aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	2b20      	cmp	r3, #32
 80009b2:	d10c      	bne.n	80009ce <IOExpenderReadPinA+0x36>
		//read gpio A at 0x12
		//เ�?็บใน Rdata
		//ตำ�?หน่ง GPIOA = 0x12
		HAL_I2C_Mem_Read_IT(&hi2c1, IOEXPD_ADDR, 0x12, I2C_MEMADD_SIZE_8BIT,
 80009b4:	2301      	movs	r3, #1
 80009b6:	9301      	str	r3, [sp, #4]
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	9300      	str	r3, [sp, #0]
 80009bc:	2301      	movs	r3, #1
 80009be:	2212      	movs	r2, #18
 80009c0:	2140      	movs	r1, #64	; 0x40
 80009c2:	4806      	ldr	r0, [pc, #24]	; (80009dc <IOExpenderReadPinA+0x44>)
 80009c4:	f001 f926 	bl	8001c14 <HAL_I2C_Mem_Read_IT>
				Rdata, 1);
		//HAL_Delay(100);
		IOExpdrExampleReadFlag =0;
 80009c8:	4b03      	ldr	r3, [pc, #12]	; (80009d8 <IOExpenderReadPinA+0x40>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	701a      	strb	r2, [r3, #0]
	}
}
 80009ce:	bf00      	nop
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	20000043 	.word	0x20000043
 80009dc:	20000054 	.word	0x20000054

080009e0 <IOExpenderWritePinB>:

//olat  = �?ำหนด output high low
//16 bits = Bank 0
//output high ไฟไม่ติด
void IOExpenderWritePinB(uint8_t Wdata) {
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b084      	sub	sp, #16
 80009e4:	af02      	add	r7, sp, #8
 80009e6:	4603      	mov	r3, r0
 80009e8:	71fb      	strb	r3, [r7, #7]
	if (IOExpdrExampleWriteFlag && hi2c1.State == HAL_I2C_STATE_READY) {
 80009ea:	4b0f      	ldr	r3, [pc, #60]	; (8000a28 <IOExpenderWritePinB+0x48>)
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d015      	beq.n	8000a1e <IOExpenderWritePinB+0x3e>
 80009f2:	4b0e      	ldr	r3, [pc, #56]	; (8000a2c <IOExpenderWritePinB+0x4c>)
 80009f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	2b20      	cmp	r3, #32
 80009fc:	d10f      	bne.n	8000a1e <IOExpenderWritePinB+0x3e>
		//สร้าง data ตัวใหม่
		static uint8_t data;
		//ป้อง�?ัน�?าร�?�?้ไขข้อมูลใน wdata เมื่อ ข้อมูลใน i2c ยังส่งไม่เสร็จ ข้อมูลจะยังไม่ถู�?�?�?้ไข
		data = Wdata; //เปลี่ยน�?ปลงค่าของตัวนี้ได้เรื่อย ๆ
 80009fe:	4a0c      	ldr	r2, [pc, #48]	; (8000a30 <IOExpenderWritePinB+0x50>)
 8000a00:	79fb      	ldrb	r3, [r7, #7]
 8000a02:	7013      	strb	r3, [r2, #0]
		//write memory
		//เขียนลงใน output GPIOB �?ต่ไม่ได้เขียนลง GPIOB โดยตรง โดยจะเขียนลงใน OLATB
		//olatb = 0x15 output gpiob
		HAL_I2C_Mem_Write_IT(&hi2c1, IOEXPD_ADDR, 0x15, I2C_MEMADD_SIZE_8BIT,
 8000a04:	2301      	movs	r3, #1
 8000a06:	9301      	str	r3, [sp, #4]
 8000a08:	4b09      	ldr	r3, [pc, #36]	; (8000a30 <IOExpenderWritePinB+0x50>)
 8000a0a:	9300      	str	r3, [sp, #0]
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	2215      	movs	r2, #21
 8000a10:	2140      	movs	r1, #64	; 0x40
 8000a12:	4806      	ldr	r0, [pc, #24]	; (8000a2c <IOExpenderWritePinB+0x4c>)
 8000a14:	f001 f84c 	bl	8001ab0 <HAL_I2C_Mem_Write_IT>
				&data, 1);
		//HAL_Delay(100);
		IOExpdrExampleWriteFlag=0;
 8000a18:	4b03      	ldr	r3, [pc, #12]	; (8000a28 <IOExpenderWritePinB+0x48>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	701a      	strb	r2, [r3, #0]
	}
}
 8000a1e:	bf00      	nop
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	20000042 	.word	0x20000042
 8000a2c:	20000054 	.word	0x20000054
 8000a30:	20000050 	.word	0x20000050

08000a34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a38:	b672      	cpsid	i
}
 8000a3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a3c:	e7fe      	b.n	8000a3c <Error_Handler+0x8>
	...

08000a40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	607b      	str	r3, [r7, #4]
 8000a4a:	4b10      	ldr	r3, [pc, #64]	; (8000a8c <HAL_MspInit+0x4c>)
 8000a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a4e:	4a0f      	ldr	r2, [pc, #60]	; (8000a8c <HAL_MspInit+0x4c>)
 8000a50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a54:	6453      	str	r3, [r2, #68]	; 0x44
 8000a56:	4b0d      	ldr	r3, [pc, #52]	; (8000a8c <HAL_MspInit+0x4c>)
 8000a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a5e:	607b      	str	r3, [r7, #4]
 8000a60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	603b      	str	r3, [r7, #0]
 8000a66:	4b09      	ldr	r3, [pc, #36]	; (8000a8c <HAL_MspInit+0x4c>)
 8000a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6a:	4a08      	ldr	r2, [pc, #32]	; (8000a8c <HAL_MspInit+0x4c>)
 8000a6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a70:	6413      	str	r3, [r2, #64]	; 0x40
 8000a72:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <HAL_MspInit+0x4c>)
 8000a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a7a:	603b      	str	r3, [r7, #0]
 8000a7c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a7e:	2007      	movs	r0, #7
 8000a80:	f000 fa8e 	bl	8000fa0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a84:	bf00      	nop
 8000a86:	3708      	adds	r7, #8
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	40023800 	.word	0x40023800

08000a90 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b08a      	sub	sp, #40	; 0x28
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a98:	f107 0314 	add.w	r3, r7, #20
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	605a      	str	r2, [r3, #4]
 8000aa2:	609a      	str	r2, [r3, #8]
 8000aa4:	60da      	str	r2, [r3, #12]
 8000aa6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a21      	ldr	r2, [pc, #132]	; (8000b34 <HAL_I2C_MspInit+0xa4>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d13c      	bne.n	8000b2c <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	613b      	str	r3, [r7, #16]
 8000ab6:	4b20      	ldr	r3, [pc, #128]	; (8000b38 <HAL_I2C_MspInit+0xa8>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	4a1f      	ldr	r2, [pc, #124]	; (8000b38 <HAL_I2C_MspInit+0xa8>)
 8000abc:	f043 0302 	orr.w	r3, r3, #2
 8000ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac2:	4b1d      	ldr	r3, [pc, #116]	; (8000b38 <HAL_I2C_MspInit+0xa8>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	f003 0302 	and.w	r3, r3, #2
 8000aca:	613b      	str	r3, [r7, #16]
 8000acc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ace:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ad2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ad4:	2312      	movs	r3, #18
 8000ad6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000adc:	2303      	movs	r3, #3
 8000ade:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ae0:	2304      	movs	r3, #4
 8000ae2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae4:	f107 0314 	add.w	r3, r7, #20
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4814      	ldr	r0, [pc, #80]	; (8000b3c <HAL_I2C_MspInit+0xac>)
 8000aec:	f000 faca 	bl	8001084 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000af0:	2300      	movs	r3, #0
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	4b10      	ldr	r3, [pc, #64]	; (8000b38 <HAL_I2C_MspInit+0xa8>)
 8000af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af8:	4a0f      	ldr	r2, [pc, #60]	; (8000b38 <HAL_I2C_MspInit+0xa8>)
 8000afa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000afe:	6413      	str	r3, [r2, #64]	; 0x40
 8000b00:	4b0d      	ldr	r3, [pc, #52]	; (8000b38 <HAL_I2C_MspInit+0xa8>)
 8000b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b08:	60fb      	str	r3, [r7, #12]
 8000b0a:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	2100      	movs	r1, #0
 8000b10:	201f      	movs	r0, #31
 8000b12:	f000 fa50 	bl	8000fb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000b16:	201f      	movs	r0, #31
 8000b18:	f000 fa69 	bl	8000fee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	2100      	movs	r1, #0
 8000b20:	2020      	movs	r0, #32
 8000b22:	f000 fa48 	bl	8000fb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000b26:	2020      	movs	r0, #32
 8000b28:	f000 fa61 	bl	8000fee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b2c:	bf00      	nop
 8000b2e:	3728      	adds	r7, #40	; 0x28
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	40005400 	.word	0x40005400
 8000b38:	40023800 	.word	0x40023800
 8000b3c:	40020400 	.word	0x40020400

08000b40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b08a      	sub	sp, #40	; 0x28
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b48:	f107 0314 	add.w	r3, r7, #20
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
 8000b52:	609a      	str	r2, [r3, #8]
 8000b54:	60da      	str	r2, [r3, #12]
 8000b56:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a19      	ldr	r2, [pc, #100]	; (8000bc4 <HAL_UART_MspInit+0x84>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d12b      	bne.n	8000bba <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	613b      	str	r3, [r7, #16]
 8000b66:	4b18      	ldr	r3, [pc, #96]	; (8000bc8 <HAL_UART_MspInit+0x88>)
 8000b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6a:	4a17      	ldr	r2, [pc, #92]	; (8000bc8 <HAL_UART_MspInit+0x88>)
 8000b6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b70:	6413      	str	r3, [r2, #64]	; 0x40
 8000b72:	4b15      	ldr	r3, [pc, #84]	; (8000bc8 <HAL_UART_MspInit+0x88>)
 8000b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b7a:	613b      	str	r3, [r7, #16]
 8000b7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60fb      	str	r3, [r7, #12]
 8000b82:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <HAL_UART_MspInit+0x88>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	4a10      	ldr	r2, [pc, #64]	; (8000bc8 <HAL_UART_MspInit+0x88>)
 8000b88:	f043 0301 	orr.w	r3, r3, #1
 8000b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8e:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <HAL_UART_MspInit+0x88>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	f003 0301 	and.w	r3, r3, #1
 8000b96:	60fb      	str	r3, [r7, #12]
 8000b98:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b9a:	230c      	movs	r3, #12
 8000b9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba6:	2303      	movs	r3, #3
 8000ba8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000baa:	2307      	movs	r3, #7
 8000bac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bae:	f107 0314 	add.w	r3, r7, #20
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4805      	ldr	r0, [pc, #20]	; (8000bcc <HAL_UART_MspInit+0x8c>)
 8000bb6:	f000 fa65 	bl	8001084 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bba:	bf00      	nop
 8000bbc:	3728      	adds	r7, #40	; 0x28
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40004400 	.word	0x40004400
 8000bc8:	40023800 	.word	0x40023800
 8000bcc:	40020000 	.word	0x40020000

08000bd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bd4:	e7fe      	b.n	8000bd4 <NMI_Handler+0x4>

08000bd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bda:	e7fe      	b.n	8000bda <HardFault_Handler+0x4>

08000bdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000be0:	e7fe      	b.n	8000be0 <MemManage_Handler+0x4>

08000be2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000be2:	b480      	push	{r7}
 8000be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000be6:	e7fe      	b.n	8000be6 <BusFault_Handler+0x4>

08000be8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bec:	e7fe      	b.n	8000bec <UsageFault_Handler+0x4>

08000bee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr

08000bfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c00:	bf00      	nop
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr

08000c0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr

08000c18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c1c:	f000 f8ac 	bl	8000d78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c20:	bf00      	nop
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000c28:	4802      	ldr	r0, [pc, #8]	; (8000c34 <I2C1_EV_IRQHandler+0x10>)
 8000c2a:	f001 f8b1 	bl	8001d90 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	20000054 	.word	0x20000054

08000c38 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000c3c:	4802      	ldr	r0, [pc, #8]	; (8000c48 <I2C1_ER_IRQHandler+0x10>)
 8000c3e:	f001 fa14 	bl	800206a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	20000054 	.word	0x20000054

08000c4c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000c50:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000c54:	f000 fbcc 	bl	80013f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c58:	bf00      	nop
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c60:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <SystemInit+0x20>)
 8000c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c66:	4a05      	ldr	r2, [pc, #20]	; (8000c7c <SystemInit+0x20>)
 8000c68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	e000ed00 	.word	0xe000ed00

08000c80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cb8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c84:	480d      	ldr	r0, [pc, #52]	; (8000cbc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c86:	490e      	ldr	r1, [pc, #56]	; (8000cc0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c88:	4a0e      	ldr	r2, [pc, #56]	; (8000cc4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c8c:	e002      	b.n	8000c94 <LoopCopyDataInit>

08000c8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c92:	3304      	adds	r3, #4

08000c94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c98:	d3f9      	bcc.n	8000c8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c9a:	4a0b      	ldr	r2, [pc, #44]	; (8000cc8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c9c:	4c0b      	ldr	r4, [pc, #44]	; (8000ccc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ca0:	e001      	b.n	8000ca6 <LoopFillZerobss>

08000ca2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ca2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ca4:	3204      	adds	r2, #4

08000ca6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ca6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ca8:	d3fb      	bcc.n	8000ca2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000caa:	f7ff ffd7 	bl	8000c5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cae:	f003 fe4d 	bl	800494c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cb2:	f7ff fc0d 	bl	80004d0 <main>
  bx  lr    
 8000cb6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cb8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cc0:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8000cc4:	080049e4 	.word	0x080049e4
  ldr r2, =_sbss
 8000cc8:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8000ccc:	200000f8 	.word	0x200000f8

08000cd0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cd0:	e7fe      	b.n	8000cd0 <ADC_IRQHandler>
	...

08000cd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cd8:	4b0e      	ldr	r3, [pc, #56]	; (8000d14 <HAL_Init+0x40>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a0d      	ldr	r2, [pc, #52]	; (8000d14 <HAL_Init+0x40>)
 8000cde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ce2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ce4:	4b0b      	ldr	r3, [pc, #44]	; (8000d14 <HAL_Init+0x40>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a0a      	ldr	r2, [pc, #40]	; (8000d14 <HAL_Init+0x40>)
 8000cea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cf0:	4b08      	ldr	r3, [pc, #32]	; (8000d14 <HAL_Init+0x40>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a07      	ldr	r2, [pc, #28]	; (8000d14 <HAL_Init+0x40>)
 8000cf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cfa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cfc:	2003      	movs	r0, #3
 8000cfe:	f000 f94f 	bl	8000fa0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d02:	2000      	movs	r0, #0
 8000d04:	f000 f808 	bl	8000d18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d08:	f7ff fe9a 	bl	8000a40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d0c:	2300      	movs	r3, #0
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40023c00 	.word	0x40023c00

08000d18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d20:	4b12      	ldr	r3, [pc, #72]	; (8000d6c <HAL_InitTick+0x54>)
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	4b12      	ldr	r3, [pc, #72]	; (8000d70 <HAL_InitTick+0x58>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	4619      	mov	r1, r3
 8000d2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d36:	4618      	mov	r0, r3
 8000d38:	f000 f967 	bl	800100a <HAL_SYSTICK_Config>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
 8000d44:	e00e      	b.n	8000d64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2b0f      	cmp	r3, #15
 8000d4a:	d80a      	bhi.n	8000d62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	6879      	ldr	r1, [r7, #4]
 8000d50:	f04f 30ff 	mov.w	r0, #4294967295
 8000d54:	f000 f92f 	bl	8000fb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d58:	4a06      	ldr	r2, [pc, #24]	; (8000d74 <HAL_InitTick+0x5c>)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	e000      	b.n	8000d64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	20000018 	.word	0x20000018
 8000d70:	20000020 	.word	0x20000020
 8000d74:	2000001c 	.word	0x2000001c

08000d78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d7c:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <HAL_IncTick+0x20>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	461a      	mov	r2, r3
 8000d82:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <HAL_IncTick+0x24>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4413      	add	r3, r2
 8000d88:	4a04      	ldr	r2, [pc, #16]	; (8000d9c <HAL_IncTick+0x24>)
 8000d8a:	6013      	str	r3, [r2, #0]
}
 8000d8c:	bf00      	nop
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	20000020 	.word	0x20000020
 8000d9c:	200000f4 	.word	0x200000f4

08000da0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  return uwTick;
 8000da4:	4b03      	ldr	r3, [pc, #12]	; (8000db4 <HAL_GetTick+0x14>)
 8000da6:	681b      	ldr	r3, [r3, #0]
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	200000f4 	.word	0x200000f4

08000db8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dc0:	f7ff ffee 	bl	8000da0 <HAL_GetTick>
 8000dc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dd0:	d005      	beq.n	8000dde <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dd2:	4b0a      	ldr	r3, [pc, #40]	; (8000dfc <HAL_Delay+0x44>)
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	4413      	add	r3, r2
 8000ddc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dde:	bf00      	nop
 8000de0:	f7ff ffde 	bl	8000da0 <HAL_GetTick>
 8000de4:	4602      	mov	r2, r0
 8000de6:	68bb      	ldr	r3, [r7, #8]
 8000de8:	1ad3      	subs	r3, r2, r3
 8000dea:	68fa      	ldr	r2, [r7, #12]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	d8f7      	bhi.n	8000de0 <HAL_Delay+0x28>
  {
  }
}
 8000df0:	bf00      	nop
 8000df2:	bf00      	nop
 8000df4:	3710      	adds	r7, #16
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	20000020 	.word	0x20000020

08000e00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b085      	sub	sp, #20
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	f003 0307 	and.w	r3, r3, #7
 8000e0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e10:	4b0c      	ldr	r3, [pc, #48]	; (8000e44 <__NVIC_SetPriorityGrouping+0x44>)
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e16:	68ba      	ldr	r2, [r7, #8]
 8000e18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e32:	4a04      	ldr	r2, [pc, #16]	; (8000e44 <__NVIC_SetPriorityGrouping+0x44>)
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	60d3      	str	r3, [r2, #12]
}
 8000e38:	bf00      	nop
 8000e3a:	3714      	adds	r7, #20
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	e000ed00 	.word	0xe000ed00

08000e48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e4c:	4b04      	ldr	r3, [pc, #16]	; (8000e60 <__NVIC_GetPriorityGrouping+0x18>)
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	0a1b      	lsrs	r3, r3, #8
 8000e52:	f003 0307 	and.w	r3, r3, #7
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	db0b      	blt.n	8000e8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e76:	79fb      	ldrb	r3, [r7, #7]
 8000e78:	f003 021f 	and.w	r2, r3, #31
 8000e7c:	4907      	ldr	r1, [pc, #28]	; (8000e9c <__NVIC_EnableIRQ+0x38>)
 8000e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e82:	095b      	lsrs	r3, r3, #5
 8000e84:	2001      	movs	r0, #1
 8000e86:	fa00 f202 	lsl.w	r2, r0, r2
 8000e8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e8e:	bf00      	nop
 8000e90:	370c      	adds	r7, #12
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	e000e100 	.word	0xe000e100

08000ea0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	6039      	str	r1, [r7, #0]
 8000eaa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	db0a      	blt.n	8000eca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	b2da      	uxtb	r2, r3
 8000eb8:	490c      	ldr	r1, [pc, #48]	; (8000eec <__NVIC_SetPriority+0x4c>)
 8000eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ebe:	0112      	lsls	r2, r2, #4
 8000ec0:	b2d2      	uxtb	r2, r2
 8000ec2:	440b      	add	r3, r1
 8000ec4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ec8:	e00a      	b.n	8000ee0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	b2da      	uxtb	r2, r3
 8000ece:	4908      	ldr	r1, [pc, #32]	; (8000ef0 <__NVIC_SetPriority+0x50>)
 8000ed0:	79fb      	ldrb	r3, [r7, #7]
 8000ed2:	f003 030f 	and.w	r3, r3, #15
 8000ed6:	3b04      	subs	r3, #4
 8000ed8:	0112      	lsls	r2, r2, #4
 8000eda:	b2d2      	uxtb	r2, r2
 8000edc:	440b      	add	r3, r1
 8000ede:	761a      	strb	r2, [r3, #24]
}
 8000ee0:	bf00      	nop
 8000ee2:	370c      	adds	r7, #12
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr
 8000eec:	e000e100 	.word	0xe000e100
 8000ef0:	e000ed00 	.word	0xe000ed00

08000ef4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b089      	sub	sp, #36	; 0x24
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	60f8      	str	r0, [r7, #12]
 8000efc:	60b9      	str	r1, [r7, #8]
 8000efe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	f003 0307 	and.w	r3, r3, #7
 8000f06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	f1c3 0307 	rsb	r3, r3, #7
 8000f0e:	2b04      	cmp	r3, #4
 8000f10:	bf28      	it	cs
 8000f12:	2304      	movcs	r3, #4
 8000f14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	3304      	adds	r3, #4
 8000f1a:	2b06      	cmp	r3, #6
 8000f1c:	d902      	bls.n	8000f24 <NVIC_EncodePriority+0x30>
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	3b03      	subs	r3, #3
 8000f22:	e000      	b.n	8000f26 <NVIC_EncodePriority+0x32>
 8000f24:	2300      	movs	r3, #0
 8000f26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f28:	f04f 32ff 	mov.w	r2, #4294967295
 8000f2c:	69bb      	ldr	r3, [r7, #24]
 8000f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f32:	43da      	mvns	r2, r3
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	401a      	ands	r2, r3
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f3c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	fa01 f303 	lsl.w	r3, r1, r3
 8000f46:	43d9      	mvns	r1, r3
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f4c:	4313      	orrs	r3, r2
         );
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3724      	adds	r7, #36	; 0x24
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
	...

08000f5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	3b01      	subs	r3, #1
 8000f68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f6c:	d301      	bcc.n	8000f72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e00f      	b.n	8000f92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f72:	4a0a      	ldr	r2, [pc, #40]	; (8000f9c <SysTick_Config+0x40>)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	3b01      	subs	r3, #1
 8000f78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f7a:	210f      	movs	r1, #15
 8000f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f80:	f7ff ff8e 	bl	8000ea0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f84:	4b05      	ldr	r3, [pc, #20]	; (8000f9c <SysTick_Config+0x40>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f8a:	4b04      	ldr	r3, [pc, #16]	; (8000f9c <SysTick_Config+0x40>)
 8000f8c:	2207      	movs	r2, #7
 8000f8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f90:	2300      	movs	r3, #0
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	e000e010 	.word	0xe000e010

08000fa0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fa8:	6878      	ldr	r0, [r7, #4]
 8000faa:	f7ff ff29 	bl	8000e00 <__NVIC_SetPriorityGrouping>
}
 8000fae:	bf00      	nop
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	b086      	sub	sp, #24
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	60b9      	str	r1, [r7, #8]
 8000fc0:	607a      	str	r2, [r7, #4]
 8000fc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fc8:	f7ff ff3e 	bl	8000e48 <__NVIC_GetPriorityGrouping>
 8000fcc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fce:	687a      	ldr	r2, [r7, #4]
 8000fd0:	68b9      	ldr	r1, [r7, #8]
 8000fd2:	6978      	ldr	r0, [r7, #20]
 8000fd4:	f7ff ff8e 	bl	8000ef4 <NVIC_EncodePriority>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fde:	4611      	mov	r1, r2
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff ff5d 	bl	8000ea0 <__NVIC_SetPriority>
}
 8000fe6:	bf00      	nop
 8000fe8:	3718      	adds	r7, #24
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b082      	sub	sp, #8
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ff8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff ff31 	bl	8000e64 <__NVIC_EnableIRQ>
}
 8001002:	bf00      	nop
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800100a:	b580      	push	{r7, lr}
 800100c:	b082      	sub	sp, #8
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f7ff ffa2 	bl	8000f5c <SysTick_Config>
 8001018:	4603      	mov	r3, r0
}
 800101a:	4618      	mov	r0, r3
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001022:	b480      	push	{r7}
 8001024:	b083      	sub	sp, #12
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001030:	b2db      	uxtb	r3, r3
 8001032:	2b02      	cmp	r3, #2
 8001034:	d004      	beq.n	8001040 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2280      	movs	r2, #128	; 0x80
 800103a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800103c:	2301      	movs	r3, #1
 800103e:	e00c      	b.n	800105a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2205      	movs	r2, #5
 8001044:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f022 0201 	bic.w	r2, r2, #1
 8001056:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001058:	2300      	movs	r3, #0
}
 800105a:	4618      	mov	r0, r3
 800105c:	370c      	adds	r7, #12
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr

08001066 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001066:	b480      	push	{r7}
 8001068:	b083      	sub	sp, #12
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001074:	b2db      	uxtb	r3, r3
}
 8001076:	4618      	mov	r0, r3
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
	...

08001084 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001084:	b480      	push	{r7}
 8001086:	b089      	sub	sp, #36	; 0x24
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800108e:	2300      	movs	r3, #0
 8001090:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001092:	2300      	movs	r3, #0
 8001094:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001096:	2300      	movs	r3, #0
 8001098:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800109a:	2300      	movs	r3, #0
 800109c:	61fb      	str	r3, [r7, #28]
 800109e:	e159      	b.n	8001354 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010a0:	2201      	movs	r2, #1
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	697a      	ldr	r2, [r7, #20]
 80010b0:	4013      	ands	r3, r2
 80010b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010b4:	693a      	ldr	r2, [r7, #16]
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	f040 8148 	bne.w	800134e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f003 0303 	and.w	r3, r3, #3
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d005      	beq.n	80010d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010d2:	2b02      	cmp	r3, #2
 80010d4:	d130      	bne.n	8001138 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	2203      	movs	r2, #3
 80010e2:	fa02 f303 	lsl.w	r3, r2, r3
 80010e6:	43db      	mvns	r3, r3
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	4013      	ands	r3, r2
 80010ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	68da      	ldr	r2, [r3, #12]
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800110c:	2201      	movs	r2, #1
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	43db      	mvns	r3, r3
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	4013      	ands	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	091b      	lsrs	r3, r3, #4
 8001122:	f003 0201 	and.w	r2, r3, #1
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	4313      	orrs	r3, r2
 8001130:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f003 0303 	and.w	r3, r3, #3
 8001140:	2b03      	cmp	r3, #3
 8001142:	d017      	beq.n	8001174 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	2203      	movs	r2, #3
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	43db      	mvns	r3, r3
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	4013      	ands	r3, r2
 800115a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	689a      	ldr	r2, [r3, #8]
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	4313      	orrs	r3, r2
 800116c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f003 0303 	and.w	r3, r3, #3
 800117c:	2b02      	cmp	r3, #2
 800117e:	d123      	bne.n	80011c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	08da      	lsrs	r2, r3, #3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	3208      	adds	r2, #8
 8001188:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800118c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	f003 0307 	and.w	r3, r3, #7
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	220f      	movs	r2, #15
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	43db      	mvns	r3, r3
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	4013      	ands	r3, r2
 80011a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	691a      	ldr	r2, [r3, #16]
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	f003 0307 	and.w	r3, r3, #7
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	08da      	lsrs	r2, r3, #3
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	3208      	adds	r2, #8
 80011c2:	69b9      	ldr	r1, [r7, #24]
 80011c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	2203      	movs	r2, #3
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	43db      	mvns	r3, r3
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	4013      	ands	r3, r2
 80011de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f003 0203 	and.w	r2, r3, #3
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001204:	2b00      	cmp	r3, #0
 8001206:	f000 80a2 	beq.w	800134e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	60fb      	str	r3, [r7, #12]
 800120e:	4b57      	ldr	r3, [pc, #348]	; (800136c <HAL_GPIO_Init+0x2e8>)
 8001210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001212:	4a56      	ldr	r2, [pc, #344]	; (800136c <HAL_GPIO_Init+0x2e8>)
 8001214:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001218:	6453      	str	r3, [r2, #68]	; 0x44
 800121a:	4b54      	ldr	r3, [pc, #336]	; (800136c <HAL_GPIO_Init+0x2e8>)
 800121c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800121e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001226:	4a52      	ldr	r2, [pc, #328]	; (8001370 <HAL_GPIO_Init+0x2ec>)
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	089b      	lsrs	r3, r3, #2
 800122c:	3302      	adds	r3, #2
 800122e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001232:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	f003 0303 	and.w	r3, r3, #3
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	220f      	movs	r2, #15
 800123e:	fa02 f303 	lsl.w	r3, r2, r3
 8001242:	43db      	mvns	r3, r3
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	4013      	ands	r3, r2
 8001248:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a49      	ldr	r2, [pc, #292]	; (8001374 <HAL_GPIO_Init+0x2f0>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d019      	beq.n	8001286 <HAL_GPIO_Init+0x202>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a48      	ldr	r2, [pc, #288]	; (8001378 <HAL_GPIO_Init+0x2f4>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d013      	beq.n	8001282 <HAL_GPIO_Init+0x1fe>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a47      	ldr	r2, [pc, #284]	; (800137c <HAL_GPIO_Init+0x2f8>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d00d      	beq.n	800127e <HAL_GPIO_Init+0x1fa>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a46      	ldr	r2, [pc, #280]	; (8001380 <HAL_GPIO_Init+0x2fc>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d007      	beq.n	800127a <HAL_GPIO_Init+0x1f6>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a45      	ldr	r2, [pc, #276]	; (8001384 <HAL_GPIO_Init+0x300>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d101      	bne.n	8001276 <HAL_GPIO_Init+0x1f2>
 8001272:	2304      	movs	r3, #4
 8001274:	e008      	b.n	8001288 <HAL_GPIO_Init+0x204>
 8001276:	2307      	movs	r3, #7
 8001278:	e006      	b.n	8001288 <HAL_GPIO_Init+0x204>
 800127a:	2303      	movs	r3, #3
 800127c:	e004      	b.n	8001288 <HAL_GPIO_Init+0x204>
 800127e:	2302      	movs	r3, #2
 8001280:	e002      	b.n	8001288 <HAL_GPIO_Init+0x204>
 8001282:	2301      	movs	r3, #1
 8001284:	e000      	b.n	8001288 <HAL_GPIO_Init+0x204>
 8001286:	2300      	movs	r3, #0
 8001288:	69fa      	ldr	r2, [r7, #28]
 800128a:	f002 0203 	and.w	r2, r2, #3
 800128e:	0092      	lsls	r2, r2, #2
 8001290:	4093      	lsls	r3, r2
 8001292:	69ba      	ldr	r2, [r7, #24]
 8001294:	4313      	orrs	r3, r2
 8001296:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001298:	4935      	ldr	r1, [pc, #212]	; (8001370 <HAL_GPIO_Init+0x2ec>)
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	089b      	lsrs	r3, r3, #2
 800129e:	3302      	adds	r3, #2
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012a6:	4b38      	ldr	r3, [pc, #224]	; (8001388 <HAL_GPIO_Init+0x304>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	43db      	mvns	r3, r3
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	4013      	ands	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d003      	beq.n	80012ca <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012ca:	4a2f      	ldr	r2, [pc, #188]	; (8001388 <HAL_GPIO_Init+0x304>)
 80012cc:	69bb      	ldr	r3, [r7, #24]
 80012ce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80012d0:	4b2d      	ldr	r3, [pc, #180]	; (8001388 <HAL_GPIO_Init+0x304>)
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	43db      	mvns	r3, r3
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	4013      	ands	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d003      	beq.n	80012f4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012f4:	4a24      	ldr	r2, [pc, #144]	; (8001388 <HAL_GPIO_Init+0x304>)
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012fa:	4b23      	ldr	r3, [pc, #140]	; (8001388 <HAL_GPIO_Init+0x304>)
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	43db      	mvns	r3, r3
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	4013      	ands	r3, r2
 8001308:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d003      	beq.n	800131e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001316:	69ba      	ldr	r2, [r7, #24]
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	4313      	orrs	r3, r2
 800131c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800131e:	4a1a      	ldr	r2, [pc, #104]	; (8001388 <HAL_GPIO_Init+0x304>)
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001324:	4b18      	ldr	r3, [pc, #96]	; (8001388 <HAL_GPIO_Init+0x304>)
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	43db      	mvns	r3, r3
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	4013      	ands	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d003      	beq.n	8001348 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	4313      	orrs	r3, r2
 8001346:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001348:	4a0f      	ldr	r2, [pc, #60]	; (8001388 <HAL_GPIO_Init+0x304>)
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	3301      	adds	r3, #1
 8001352:	61fb      	str	r3, [r7, #28]
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	2b0f      	cmp	r3, #15
 8001358:	f67f aea2 	bls.w	80010a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800135c:	bf00      	nop
 800135e:	bf00      	nop
 8001360:	3724      	adds	r7, #36	; 0x24
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	40023800 	.word	0x40023800
 8001370:	40013800 	.word	0x40013800
 8001374:	40020000 	.word	0x40020000
 8001378:	40020400 	.word	0x40020400
 800137c:	40020800 	.word	0x40020800
 8001380:	40020c00 	.word	0x40020c00
 8001384:	40021000 	.word	0x40021000
 8001388:	40013c00 	.word	0x40013c00

0800138c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800138c:	b480      	push	{r7}
 800138e:	b085      	sub	sp, #20
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	460b      	mov	r3, r1
 8001396:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	691a      	ldr	r2, [r3, #16]
 800139c:	887b      	ldrh	r3, [r7, #2]
 800139e:	4013      	ands	r3, r2
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d002      	beq.n	80013aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013a4:	2301      	movs	r3, #1
 80013a6:	73fb      	strb	r3, [r7, #15]
 80013a8:	e001      	b.n	80013ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013aa:	2300      	movs	r3, #0
 80013ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3714      	adds	r7, #20
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr

080013bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	460b      	mov	r3, r1
 80013c6:	807b      	strh	r3, [r7, #2]
 80013c8:	4613      	mov	r3, r2
 80013ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013cc:	787b      	ldrb	r3, [r7, #1]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d003      	beq.n	80013da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013d2:	887a      	ldrh	r2, [r7, #2]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013d8:	e003      	b.n	80013e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013da:	887b      	ldrh	r3, [r7, #2]
 80013dc:	041a      	lsls	r2, r3, #16
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	619a      	str	r2, [r3, #24]
}
 80013e2:	bf00      	nop
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
	...

080013f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80013fa:	4b08      	ldr	r3, [pc, #32]	; (800141c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013fc:	695a      	ldr	r2, [r3, #20]
 80013fe:	88fb      	ldrh	r3, [r7, #6]
 8001400:	4013      	ands	r3, r2
 8001402:	2b00      	cmp	r3, #0
 8001404:	d006      	beq.n	8001414 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001406:	4a05      	ldr	r2, [pc, #20]	; (800141c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001408:	88fb      	ldrh	r3, [r7, #6]
 800140a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800140c:	88fb      	ldrh	r3, [r7, #6]
 800140e:	4618      	mov	r0, r3
 8001410:	f000 f806 	bl	8001420 <HAL_GPIO_EXTI_Callback>
  }
}
 8001414:	bf00      	nop
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	40013c00 	.word	0x40013c00

08001420 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	4603      	mov	r3, r0
 8001428:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800142a:	bf00      	nop
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
	...

08001438 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d101      	bne.n	800144a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e12b      	b.n	80016a2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001450:	b2db      	uxtb	r3, r3
 8001452:	2b00      	cmp	r3, #0
 8001454:	d106      	bne.n	8001464 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2200      	movs	r2, #0
 800145a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	f7ff fb16 	bl	8000a90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2224      	movs	r2, #36	; 0x24
 8001468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f022 0201 	bic.w	r2, r2, #1
 800147a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800148a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800149a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800149c:	f003 f818 	bl	80044d0 <HAL_RCC_GetPCLK1Freq>
 80014a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	4a81      	ldr	r2, [pc, #516]	; (80016ac <HAL_I2C_Init+0x274>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d807      	bhi.n	80014bc <HAL_I2C_Init+0x84>
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	4a80      	ldr	r2, [pc, #512]	; (80016b0 <HAL_I2C_Init+0x278>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	bf94      	ite	ls
 80014b4:	2301      	movls	r3, #1
 80014b6:	2300      	movhi	r3, #0
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	e006      	b.n	80014ca <HAL_I2C_Init+0x92>
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	4a7d      	ldr	r2, [pc, #500]	; (80016b4 <HAL_I2C_Init+0x27c>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	bf94      	ite	ls
 80014c4:	2301      	movls	r3, #1
 80014c6:	2300      	movhi	r3, #0
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e0e7      	b.n	80016a2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	4a78      	ldr	r2, [pc, #480]	; (80016b8 <HAL_I2C_Init+0x280>)
 80014d6:	fba2 2303 	umull	r2, r3, r2, r3
 80014da:	0c9b      	lsrs	r3, r3, #18
 80014dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	68ba      	ldr	r2, [r7, #8]
 80014ee:	430a      	orrs	r2, r1
 80014f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	6a1b      	ldr	r3, [r3, #32]
 80014f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	4a6a      	ldr	r2, [pc, #424]	; (80016ac <HAL_I2C_Init+0x274>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d802      	bhi.n	800150c <HAL_I2C_Init+0xd4>
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	3301      	adds	r3, #1
 800150a:	e009      	b.n	8001520 <HAL_I2C_Init+0xe8>
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001512:	fb02 f303 	mul.w	r3, r2, r3
 8001516:	4a69      	ldr	r2, [pc, #420]	; (80016bc <HAL_I2C_Init+0x284>)
 8001518:	fba2 2303 	umull	r2, r3, r2, r3
 800151c:	099b      	lsrs	r3, r3, #6
 800151e:	3301      	adds	r3, #1
 8001520:	687a      	ldr	r2, [r7, #4]
 8001522:	6812      	ldr	r2, [r2, #0]
 8001524:	430b      	orrs	r3, r1
 8001526:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	69db      	ldr	r3, [r3, #28]
 800152e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001532:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	495c      	ldr	r1, [pc, #368]	; (80016ac <HAL_I2C_Init+0x274>)
 800153c:	428b      	cmp	r3, r1
 800153e:	d819      	bhi.n	8001574 <HAL_I2C_Init+0x13c>
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	1e59      	subs	r1, r3, #1
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	fbb1 f3f3 	udiv	r3, r1, r3
 800154e:	1c59      	adds	r1, r3, #1
 8001550:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001554:	400b      	ands	r3, r1
 8001556:	2b00      	cmp	r3, #0
 8001558:	d00a      	beq.n	8001570 <HAL_I2C_Init+0x138>
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	1e59      	subs	r1, r3, #1
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	005b      	lsls	r3, r3, #1
 8001564:	fbb1 f3f3 	udiv	r3, r1, r3
 8001568:	3301      	adds	r3, #1
 800156a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800156e:	e051      	b.n	8001614 <HAL_I2C_Init+0x1dc>
 8001570:	2304      	movs	r3, #4
 8001572:	e04f      	b.n	8001614 <HAL_I2C_Init+0x1dc>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d111      	bne.n	80015a0 <HAL_I2C_Init+0x168>
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	1e58      	subs	r0, r3, #1
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6859      	ldr	r1, [r3, #4]
 8001584:	460b      	mov	r3, r1
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	440b      	add	r3, r1
 800158a:	fbb0 f3f3 	udiv	r3, r0, r3
 800158e:	3301      	adds	r3, #1
 8001590:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001594:	2b00      	cmp	r3, #0
 8001596:	bf0c      	ite	eq
 8001598:	2301      	moveq	r3, #1
 800159a:	2300      	movne	r3, #0
 800159c:	b2db      	uxtb	r3, r3
 800159e:	e012      	b.n	80015c6 <HAL_I2C_Init+0x18e>
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	1e58      	subs	r0, r3, #1
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6859      	ldr	r1, [r3, #4]
 80015a8:	460b      	mov	r3, r1
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	440b      	add	r3, r1
 80015ae:	0099      	lsls	r1, r3, #2
 80015b0:	440b      	add	r3, r1
 80015b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80015b6:	3301      	adds	r3, #1
 80015b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015bc:	2b00      	cmp	r3, #0
 80015be:	bf0c      	ite	eq
 80015c0:	2301      	moveq	r3, #1
 80015c2:	2300      	movne	r3, #0
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <HAL_I2C_Init+0x196>
 80015ca:	2301      	movs	r3, #1
 80015cc:	e022      	b.n	8001614 <HAL_I2C_Init+0x1dc>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d10e      	bne.n	80015f4 <HAL_I2C_Init+0x1bc>
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	1e58      	subs	r0, r3, #1
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6859      	ldr	r1, [r3, #4]
 80015de:	460b      	mov	r3, r1
 80015e0:	005b      	lsls	r3, r3, #1
 80015e2:	440b      	add	r3, r1
 80015e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80015e8:	3301      	adds	r3, #1
 80015ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015f2:	e00f      	b.n	8001614 <HAL_I2C_Init+0x1dc>
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	1e58      	subs	r0, r3, #1
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6859      	ldr	r1, [r3, #4]
 80015fc:	460b      	mov	r3, r1
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	440b      	add	r3, r1
 8001602:	0099      	lsls	r1, r3, #2
 8001604:	440b      	add	r3, r1
 8001606:	fbb0 f3f3 	udiv	r3, r0, r3
 800160a:	3301      	adds	r3, #1
 800160c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001610:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001614:	6879      	ldr	r1, [r7, #4]
 8001616:	6809      	ldr	r1, [r1, #0]
 8001618:	4313      	orrs	r3, r2
 800161a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	69da      	ldr	r2, [r3, #28]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6a1b      	ldr	r3, [r3, #32]
 800162e:	431a      	orrs	r2, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	430a      	orrs	r2, r1
 8001636:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001642:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	6911      	ldr	r1, [r2, #16]
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	68d2      	ldr	r2, [r2, #12]
 800164e:	4311      	orrs	r1, r2
 8001650:	687a      	ldr	r2, [r7, #4]
 8001652:	6812      	ldr	r2, [r2, #0]
 8001654:	430b      	orrs	r3, r1
 8001656:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	68db      	ldr	r3, [r3, #12]
 800165e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	695a      	ldr	r2, [r3, #20]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	699b      	ldr	r3, [r3, #24]
 800166a:	431a      	orrs	r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	430a      	orrs	r2, r1
 8001672:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f042 0201 	orr.w	r2, r2, #1
 8001682:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2200      	movs	r2, #0
 8001688:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2220      	movs	r2, #32
 800168e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2200      	movs	r2, #0
 8001696:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2200      	movs	r2, #0
 800169c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3710      	adds	r7, #16
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	000186a0 	.word	0x000186a0
 80016b0:	001e847f 	.word	0x001e847f
 80016b4:	003d08ff 	.word	0x003d08ff
 80016b8:	431bde83 	.word	0x431bde83
 80016bc:	10624dd3 	.word	0x10624dd3

080016c0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b088      	sub	sp, #32
 80016c4:	af02      	add	r7, sp, #8
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	607a      	str	r2, [r7, #4]
 80016ca:	461a      	mov	r2, r3
 80016cc:	460b      	mov	r3, r1
 80016ce:	817b      	strh	r3, [r7, #10]
 80016d0:	4613      	mov	r3, r2
 80016d2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80016d4:	f7ff fb64 	bl	8000da0 <HAL_GetTick>
 80016d8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	2b20      	cmp	r3, #32
 80016e4:	f040 80e0 	bne.w	80018a8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	9300      	str	r3, [sp, #0]
 80016ec:	2319      	movs	r3, #25
 80016ee:	2201      	movs	r2, #1
 80016f0:	4970      	ldr	r1, [pc, #448]	; (80018b4 <HAL_I2C_Master_Transmit+0x1f4>)
 80016f2:	68f8      	ldr	r0, [r7, #12]
 80016f4:	f002 f8cc 	bl	8003890 <I2C_WaitOnFlagUntilTimeout>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80016fe:	2302      	movs	r3, #2
 8001700:	e0d3      	b.n	80018aa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001708:	2b01      	cmp	r3, #1
 800170a:	d101      	bne.n	8001710 <HAL_I2C_Master_Transmit+0x50>
 800170c:	2302      	movs	r3, #2
 800170e:	e0cc      	b.n	80018aa <HAL_I2C_Master_Transmit+0x1ea>
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	2201      	movs	r2, #1
 8001714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	2b01      	cmp	r3, #1
 8001724:	d007      	beq.n	8001736 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f042 0201 	orr.w	r2, r2, #1
 8001734:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001744:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	2221      	movs	r2, #33	; 0x21
 800174a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	2210      	movs	r2, #16
 8001752:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	2200      	movs	r2, #0
 800175a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	893a      	ldrh	r2, [r7, #8]
 8001766:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800176c:	b29a      	uxth	r2, r3
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	4a50      	ldr	r2, [pc, #320]	; (80018b8 <HAL_I2C_Master_Transmit+0x1f8>)
 8001776:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001778:	8979      	ldrh	r1, [r7, #10]
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	6a3a      	ldr	r2, [r7, #32]
 800177e:	68f8      	ldr	r0, [r7, #12]
 8001780:	f001 fec6 	bl	8003510 <I2C_MasterRequestWrite>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e08d      	b.n	80018aa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800178e:	2300      	movs	r3, #0
 8001790:	613b      	str	r3, [r7, #16]
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	695b      	ldr	r3, [r3, #20]
 8001798:	613b      	str	r3, [r7, #16]
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	699b      	ldr	r3, [r3, #24]
 80017a0:	613b      	str	r3, [r7, #16]
 80017a2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80017a4:	e066      	b.n	8001874 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017a6:	697a      	ldr	r2, [r7, #20]
 80017a8:	6a39      	ldr	r1, [r7, #32]
 80017aa:	68f8      	ldr	r0, [r7, #12]
 80017ac:	f002 f946 	bl	8003a3c <I2C_WaitOnTXEFlagUntilTimeout>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d00d      	beq.n	80017d2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ba:	2b04      	cmp	r3, #4
 80017bc:	d107      	bne.n	80017ce <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017cc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e06b      	b.n	80018aa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d6:	781a      	ldrb	r2, [r3, #0]
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e2:	1c5a      	adds	r2, r3, #1
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017ec:	b29b      	uxth	r3, r3
 80017ee:	3b01      	subs	r3, #1
 80017f0:	b29a      	uxth	r2, r3
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017fa:	3b01      	subs	r3, #1
 80017fc:	b29a      	uxth	r2, r3
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	695b      	ldr	r3, [r3, #20]
 8001808:	f003 0304 	and.w	r3, r3, #4
 800180c:	2b04      	cmp	r3, #4
 800180e:	d11b      	bne.n	8001848 <HAL_I2C_Master_Transmit+0x188>
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001814:	2b00      	cmp	r3, #0
 8001816:	d017      	beq.n	8001848 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181c:	781a      	ldrb	r2, [r3, #0]
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001828:	1c5a      	adds	r2, r3, #1
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001832:	b29b      	uxth	r3, r3
 8001834:	3b01      	subs	r3, #1
 8001836:	b29a      	uxth	r2, r3
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001840:	3b01      	subs	r3, #1
 8001842:	b29a      	uxth	r2, r3
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001848:	697a      	ldr	r2, [r7, #20]
 800184a:	6a39      	ldr	r1, [r7, #32]
 800184c:	68f8      	ldr	r0, [r7, #12]
 800184e:	f002 f936 	bl	8003abe <I2C_WaitOnBTFFlagUntilTimeout>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d00d      	beq.n	8001874 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185c:	2b04      	cmp	r3, #4
 800185e:	d107      	bne.n	8001870 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800186e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e01a      	b.n	80018aa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001878:	2b00      	cmp	r3, #0
 800187a:	d194      	bne.n	80017a6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800188a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	2220      	movs	r2, #32
 8001890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	2200      	movs	r2, #0
 8001898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	2200      	movs	r2, #0
 80018a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80018a4:	2300      	movs	r3, #0
 80018a6:	e000      	b.n	80018aa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80018a8:	2302      	movs	r3, #2
  }
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3718      	adds	r7, #24
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	00100002 	.word	0x00100002
 80018b8:	ffff0000 	.word	0xffff0000

080018bc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b088      	sub	sp, #32
 80018c0:	af02      	add	r7, sp, #8
 80018c2:	60f8      	str	r0, [r7, #12]
 80018c4:	4608      	mov	r0, r1
 80018c6:	4611      	mov	r1, r2
 80018c8:	461a      	mov	r2, r3
 80018ca:	4603      	mov	r3, r0
 80018cc:	817b      	strh	r3, [r7, #10]
 80018ce:	460b      	mov	r3, r1
 80018d0:	813b      	strh	r3, [r7, #8]
 80018d2:	4613      	mov	r3, r2
 80018d4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80018d6:	f7ff fa63 	bl	8000da0 <HAL_GetTick>
 80018da:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	2b20      	cmp	r3, #32
 80018e6:	f040 80d9 	bne.w	8001a9c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	9300      	str	r3, [sp, #0]
 80018ee:	2319      	movs	r3, #25
 80018f0:	2201      	movs	r2, #1
 80018f2:	496d      	ldr	r1, [pc, #436]	; (8001aa8 <HAL_I2C_Mem_Write+0x1ec>)
 80018f4:	68f8      	ldr	r0, [r7, #12]
 80018f6:	f001 ffcb 	bl	8003890 <I2C_WaitOnFlagUntilTimeout>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001900:	2302      	movs	r3, #2
 8001902:	e0cc      	b.n	8001a9e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800190a:	2b01      	cmp	r3, #1
 800190c:	d101      	bne.n	8001912 <HAL_I2C_Mem_Write+0x56>
 800190e:	2302      	movs	r3, #2
 8001910:	e0c5      	b.n	8001a9e <HAL_I2C_Mem_Write+0x1e2>
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	2201      	movs	r2, #1
 8001916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0301 	and.w	r3, r3, #1
 8001924:	2b01      	cmp	r3, #1
 8001926:	d007      	beq.n	8001938 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f042 0201 	orr.w	r2, r2, #1
 8001936:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001946:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2221      	movs	r2, #33	; 0x21
 800194c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	2240      	movs	r2, #64	; 0x40
 8001954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	2200      	movs	r2, #0
 800195c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	6a3a      	ldr	r2, [r7, #32]
 8001962:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001968:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800196e:	b29a      	uxth	r2, r3
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	4a4d      	ldr	r2, [pc, #308]	; (8001aac <HAL_I2C_Mem_Write+0x1f0>)
 8001978:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800197a:	88f8      	ldrh	r0, [r7, #6]
 800197c:	893a      	ldrh	r2, [r7, #8]
 800197e:	8979      	ldrh	r1, [r7, #10]
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	9301      	str	r3, [sp, #4]
 8001984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001986:	9300      	str	r3, [sp, #0]
 8001988:	4603      	mov	r3, r0
 800198a:	68f8      	ldr	r0, [r7, #12]
 800198c:	f001 fe42 	bl	8003614 <I2C_RequestMemoryWrite>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d052      	beq.n	8001a3c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e081      	b.n	8001a9e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800199a:	697a      	ldr	r2, [r7, #20]
 800199c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800199e:	68f8      	ldr	r0, [r7, #12]
 80019a0:	f002 f84c 	bl	8003a3c <I2C_WaitOnTXEFlagUntilTimeout>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d00d      	beq.n	80019c6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ae:	2b04      	cmp	r3, #4
 80019b0:	d107      	bne.n	80019c2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019c0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e06b      	b.n	8001a9e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ca:	781a      	ldrb	r2, [r3, #0]
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d6:	1c5a      	adds	r2, r3, #1
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019e0:	3b01      	subs	r3, #1
 80019e2:	b29a      	uxth	r2, r3
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019ec:	b29b      	uxth	r3, r3
 80019ee:	3b01      	subs	r3, #1
 80019f0:	b29a      	uxth	r2, r3
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	695b      	ldr	r3, [r3, #20]
 80019fc:	f003 0304 	and.w	r3, r3, #4
 8001a00:	2b04      	cmp	r3, #4
 8001a02:	d11b      	bne.n	8001a3c <HAL_I2C_Mem_Write+0x180>
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d017      	beq.n	8001a3c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a10:	781a      	ldrb	r2, [r3, #0]
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a1c:	1c5a      	adds	r2, r3, #1
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a26:	3b01      	subs	r3, #1
 8001a28:	b29a      	uxth	r2, r3
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	3b01      	subs	r3, #1
 8001a36:	b29a      	uxth	r2, r3
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d1aa      	bne.n	800199a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a44:	697a      	ldr	r2, [r7, #20]
 8001a46:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a48:	68f8      	ldr	r0, [r7, #12]
 8001a4a:	f002 f838 	bl	8003abe <I2C_WaitOnBTFFlagUntilTimeout>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d00d      	beq.n	8001a70 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a58:	2b04      	cmp	r3, #4
 8001a5a:	d107      	bne.n	8001a6c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a6a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e016      	b.n	8001a9e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	2220      	movs	r2, #32
 8001a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2200      	movs	r2, #0
 8001a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	e000      	b.n	8001a9e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001a9c:	2302      	movs	r3, #2
  }
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3718      	adds	r7, #24
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	00100002 	.word	0x00100002
 8001aac:	ffff0000 	.word	0xffff0000

08001ab0 <HAL_I2C_Mem_Write_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b087      	sub	sp, #28
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	60f8      	str	r0, [r7, #12]
 8001ab8:	4608      	mov	r0, r1
 8001aba:	4611      	mov	r1, r2
 8001abc:	461a      	mov	r2, r3
 8001abe:	4603      	mov	r3, r0
 8001ac0:	817b      	strh	r3, [r7, #10]
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	813b      	strh	r3, [r7, #8]
 8001ac6:	4613      	mov	r3, r2
 8001ac8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001aca:	2300      	movs	r3, #0
 8001acc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	2b20      	cmp	r3, #32
 8001ad8:	f040 808e 	bne.w	8001bf8 <HAL_I2C_Mem_Write_IT+0x148>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8001adc:	4b4a      	ldr	r3, [pc, #296]	; (8001c08 <HAL_I2C_Mem_Write_IT+0x158>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	08db      	lsrs	r3, r3, #3
 8001ae2:	4a4a      	ldr	r2, [pc, #296]	; (8001c0c <HAL_I2C_Mem_Write_IT+0x15c>)
 8001ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ae8:	0a1a      	lsrs	r2, r3, #8
 8001aea:	4613      	mov	r3, r2
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	4413      	add	r3, r2
 8001af0:	009a      	lsls	r2, r3, #2
 8001af2:	4413      	add	r3, r2
 8001af4:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	3b01      	subs	r3, #1
 8001afa:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d116      	bne.n	8001b30 <HAL_I2C_Mem_Write_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	2200      	movs	r2, #0
 8001b06:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2220      	movs	r2, #32
 8001b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2200      	movs	r2, #0
 8001b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1c:	f043 0220 	orr.w	r2, r3, #32
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2200      	movs	r2, #0
 8001b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e064      	b.n	8001bfa <HAL_I2C_Mem_Write_IT+0x14a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	699b      	ldr	r3, [r3, #24]
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d0db      	beq.n	8001af6 <HAL_I2C_Mem_Write_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d101      	bne.n	8001b4c <HAL_I2C_Mem_Write_IT+0x9c>
 8001b48:	2302      	movs	r3, #2
 8001b4a:	e056      	b.n	8001bfa <HAL_I2C_Mem_Write_IT+0x14a>
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0301 	and.w	r3, r3, #1
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d007      	beq.n	8001b72 <HAL_I2C_Mem_Write_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f042 0201 	orr.w	r2, r2, #1
 8001b70:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b80:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2221      	movs	r2, #33	; 0x21
 8001b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	2240      	movs	r2, #64	; 0x40
 8001b8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2200      	movs	r2, #0
 8001b96:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	6a3a      	ldr	r2, [r7, #32]
 8001b9c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001ba2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ba8:	b29a      	uxth	r2, r3
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	4a17      	ldr	r2, [pc, #92]	; (8001c10 <HAL_I2C_Mem_Write_IT+0x160>)
 8001bb2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8001bb4:	897a      	ldrh	r2, [r7, #10]
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8001bba:	893a      	ldrh	r2, [r7, #8]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8001bc0:	88fa      	ldrh	r2, [r7, #6]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	651a      	str	r2, [r3, #80]	; 0x50

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001bda:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2200      	movs	r2, #0
 8001be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	685a      	ldr	r2, [r3, #4]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8001bf2:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	e000      	b.n	8001bfa <HAL_I2C_Mem_Write_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8001bf8:	2302      	movs	r3, #2
  }
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	371c      	adds	r7, #28
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	20000018 	.word	0x20000018
 8001c0c:	14f8b589 	.word	0x14f8b589
 8001c10:	ffff0000 	.word	0xffff0000

08001c14 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b087      	sub	sp, #28
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	4608      	mov	r0, r1
 8001c1e:	4611      	mov	r1, r2
 8001c20:	461a      	mov	r2, r3
 8001c22:	4603      	mov	r3, r0
 8001c24:	817b      	strh	r3, [r7, #10]
 8001c26:	460b      	mov	r3, r1
 8001c28:	813b      	strh	r3, [r7, #8]
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	2b20      	cmp	r3, #32
 8001c3c:	f040 809a 	bne.w	8001d74 <HAL_I2C_Mem_Read_IT+0x160>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8001c40:	4b50      	ldr	r3, [pc, #320]	; (8001d84 <HAL_I2C_Mem_Read_IT+0x170>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	08db      	lsrs	r3, r3, #3
 8001c46:	4a50      	ldr	r2, [pc, #320]	; (8001d88 <HAL_I2C_Mem_Read_IT+0x174>)
 8001c48:	fba2 2303 	umull	r2, r3, r2, r3
 8001c4c:	0a1a      	lsrs	r2, r3, #8
 8001c4e:	4613      	mov	r3, r2
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	4413      	add	r3, r2
 8001c54:	009a      	lsls	r2, r3, #2
 8001c56:	4413      	add	r3, r2
 8001c58:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	3b01      	subs	r3, #1
 8001c5e:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d116      	bne.n	8001c94 <HAL_I2C_Mem_Read_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2220      	movs	r2, #32
 8001c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2200      	movs	r2, #0
 8001c78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c80:	f043 0220 	orr.w	r2, r3, #32
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e070      	b.n	8001d76 <HAL_I2C_Mem_Read_IT+0x162>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	699b      	ldr	r3, [r3, #24]
 8001c9a:	f003 0302 	and.w	r3, r3, #2
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d0db      	beq.n	8001c5a <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d101      	bne.n	8001cb0 <HAL_I2C_Mem_Read_IT+0x9c>
 8001cac:	2302      	movs	r3, #2
 8001cae:	e062      	b.n	8001d76 <HAL_I2C_Mem_Read_IT+0x162>
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0301 	and.w	r3, r3, #1
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d007      	beq.n	8001cd6 <HAL_I2C_Mem_Read_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f042 0201 	orr.w	r2, r2, #1
 8001cd4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ce4:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2222      	movs	r2, #34	; 0x22
 8001cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2240      	movs	r2, #64	; 0x40
 8001cf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	6a3a      	ldr	r2, [r7, #32]
 8001d00:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001d06:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d0c:	b29a      	uxth	r2, r3
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	4a1d      	ldr	r2, [pc, #116]	; (8001d8c <HAL_I2C_Mem_Read_IT+0x178>)
 8001d16:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8001d18:	897a      	ldrh	r2, [r7, #10]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8001d1e:	893a      	ldrh	r2, [r7, #8]
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8001d24:	88fa      	ldrh	r2, [r7, #6]
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001d3e:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d4e:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2200      	movs	r2, #0
 8001d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d007      	beq.n	8001d70 <HAL_I2C_Mem_Read_IT+0x15c>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	685a      	ldr	r2, [r3, #4]
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8001d6e:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 8001d70:	2300      	movs	r3, #0
 8001d72:	e000      	b.n	8001d76 <HAL_I2C_Mem_Read_IT+0x162>
  }
  else
  {
    return HAL_BUSY;
 8001d74:	2302      	movs	r3, #2
  }
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	371c      	adds	r7, #28
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	20000018 	.word	0x20000018
 8001d88:	14f8b589 	.word	0x14f8b589
 8001d8c:	ffff0000 	.word	0xffff0000

08001d90 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b088      	sub	sp, #32
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001db0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001db8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001dba:	7bfb      	ldrb	r3, [r7, #15]
 8001dbc:	2b10      	cmp	r3, #16
 8001dbe:	d003      	beq.n	8001dc8 <HAL_I2C_EV_IRQHandler+0x38>
 8001dc0:	7bfb      	ldrb	r3, [r7, #15]
 8001dc2:	2b40      	cmp	r3, #64	; 0x40
 8001dc4:	f040 80bd 	bne.w	8001f42 <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	699b      	ldr	r3, [r3, #24]
 8001dce:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	695b      	ldr	r3, [r3, #20]
 8001dd6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d10d      	bne.n	8001dfe <HAL_I2C_EV_IRQHandler+0x6e>
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001de8:	d003      	beq.n	8001df2 <HAL_I2C_EV_IRQHandler+0x62>
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001df0:	d101      	bne.n	8001df6 <HAL_I2C_EV_IRQHandler+0x66>
 8001df2:	2301      	movs	r3, #1
 8001df4:	e000      	b.n	8001df8 <HAL_I2C_EV_IRQHandler+0x68>
 8001df6:	2300      	movs	r3, #0
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	f000 812e 	beq.w	800205a <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	f003 0301 	and.w	r3, r3, #1
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d00c      	beq.n	8001e22 <HAL_I2C_EV_IRQHandler+0x92>
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	0a5b      	lsrs	r3, r3, #9
 8001e0c:	f003 0301 	and.w	r3, r3, #1
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d006      	beq.n	8001e22 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f001 fef4 	bl	8003c02 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f000 fd62 	bl	80028e4 <I2C_Master_SB>
 8001e20:	e08e      	b.n	8001f40 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	08db      	lsrs	r3, r3, #3
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d009      	beq.n	8001e42 <HAL_I2C_EV_IRQHandler+0xb2>
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	0a5b      	lsrs	r3, r3, #9
 8001e32:	f003 0301 	and.w	r3, r3, #1
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d003      	beq.n	8001e42 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f000 fdd8 	bl	80029f0 <I2C_Master_ADD10>
 8001e40:	e07e      	b.n	8001f40 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	085b      	lsrs	r3, r3, #1
 8001e46:	f003 0301 	and.w	r3, r3, #1
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d009      	beq.n	8001e62 <HAL_I2C_EV_IRQHandler+0xd2>
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	0a5b      	lsrs	r3, r3, #9
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d003      	beq.n	8001e62 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f000 fdf2 	bl	8002a44 <I2C_Master_ADDR>
 8001e60:	e06e      	b.n	8001f40 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	089b      	lsrs	r3, r3, #2
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d037      	beq.n	8001ede <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e7c:	f000 80ef 	beq.w	800205e <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	09db      	lsrs	r3, r3, #7
 8001e84:	f003 0301 	and.w	r3, r3, #1
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d00f      	beq.n	8001eac <HAL_I2C_EV_IRQHandler+0x11c>
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	0a9b      	lsrs	r3, r3, #10
 8001e90:	f003 0301 	and.w	r3, r3, #1
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d009      	beq.n	8001eac <HAL_I2C_EV_IRQHandler+0x11c>
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	089b      	lsrs	r3, r3, #2
 8001e9c:	f003 0301 	and.w	r3, r3, #1
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d103      	bne.n	8001eac <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f000 f9ef 	bl	8002288 <I2C_MasterTransmit_TXE>
 8001eaa:	e049      	b.n	8001f40 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	089b      	lsrs	r3, r3, #2
 8001eb0:	f003 0301 	and.w	r3, r3, #1
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	f000 80d2 	beq.w	800205e <HAL_I2C_EV_IRQHandler+0x2ce>
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	0a5b      	lsrs	r3, r3, #9
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	f000 80cb 	beq.w	800205e <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8001ec8:	7bfb      	ldrb	r3, [r7, #15]
 8001eca:	2b10      	cmp	r3, #16
 8001ecc:	d103      	bne.n	8001ed6 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f000 fa76 	bl	80023c0 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ed4:	e0c3      	b.n	800205e <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f000 fada 	bl	8002490 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001edc:	e0bf      	b.n	800205e <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ee8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001eec:	f000 80b7 	beq.w	800205e <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	099b      	lsrs	r3, r3, #6
 8001ef4:	f003 0301 	and.w	r3, r3, #1
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d00f      	beq.n	8001f1c <HAL_I2C_EV_IRQHandler+0x18c>
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	0a9b      	lsrs	r3, r3, #10
 8001f00:	f003 0301 	and.w	r3, r3, #1
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d009      	beq.n	8001f1c <HAL_I2C_EV_IRQHandler+0x18c>
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	089b      	lsrs	r3, r3, #2
 8001f0c:	f003 0301 	and.w	r3, r3, #1
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d103      	bne.n	8001f1c <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f000 fb4a 	bl	80025ae <I2C_MasterReceive_RXNE>
 8001f1a:	e011      	b.n	8001f40 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	089b      	lsrs	r3, r3, #2
 8001f20:	f003 0301 	and.w	r3, r3, #1
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	f000 809a 	beq.w	800205e <HAL_I2C_EV_IRQHandler+0x2ce>
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	0a5b      	lsrs	r3, r3, #9
 8001f2e:	f003 0301 	and.w	r3, r3, #1
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	f000 8093 	beq.w	800205e <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f000 fbe9 	bl	8002710 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f3e:	e08e      	b.n	800205e <HAL_I2C_EV_IRQHandler+0x2ce>
 8001f40:	e08d      	b.n	800205e <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d004      	beq.n	8001f54 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	695b      	ldr	r3, [r3, #20]
 8001f50:	61fb      	str	r3, [r7, #28]
 8001f52:	e007      	b.n	8001f64 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	699b      	ldr	r3, [r3, #24]
 8001f5a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	695b      	ldr	r3, [r3, #20]
 8001f62:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	085b      	lsrs	r3, r3, #1
 8001f68:	f003 0301 	and.w	r3, r3, #1
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d012      	beq.n	8001f96 <HAL_I2C_EV_IRQHandler+0x206>
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	0a5b      	lsrs	r3, r3, #9
 8001f74:	f003 0301 	and.w	r3, r3, #1
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d00c      	beq.n	8001f96 <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d003      	beq.n	8001f8c <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	699b      	ldr	r3, [r3, #24]
 8001f8a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001f8c:	69b9      	ldr	r1, [r7, #24]
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f000 ffa7 	bl	8002ee2 <I2C_Slave_ADDR>
 8001f94:	e066      	b.n	8002064 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	091b      	lsrs	r3, r3, #4
 8001f9a:	f003 0301 	and.w	r3, r3, #1
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d009      	beq.n	8001fb6 <HAL_I2C_EV_IRQHandler+0x226>
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	0a5b      	lsrs	r3, r3, #9
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d003      	beq.n	8001fb6 <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f000 ffdc 	bl	8002f6c <I2C_Slave_STOPF>
 8001fb4:	e056      	b.n	8002064 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001fb6:	7bbb      	ldrb	r3, [r7, #14]
 8001fb8:	2b21      	cmp	r3, #33	; 0x21
 8001fba:	d002      	beq.n	8001fc2 <HAL_I2C_EV_IRQHandler+0x232>
 8001fbc:	7bbb      	ldrb	r3, [r7, #14]
 8001fbe:	2b29      	cmp	r3, #41	; 0x29
 8001fc0:	d125      	bne.n	800200e <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	09db      	lsrs	r3, r3, #7
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d00f      	beq.n	8001fee <HAL_I2C_EV_IRQHandler+0x25e>
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	0a9b      	lsrs	r3, r3, #10
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d009      	beq.n	8001fee <HAL_I2C_EV_IRQHandler+0x25e>
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	089b      	lsrs	r3, r3, #2
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d103      	bne.n	8001fee <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f000 febd 	bl	8002d66 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001fec:	e039      	b.n	8002062 <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	089b      	lsrs	r3, r3, #2
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d033      	beq.n	8002062 <HAL_I2C_EV_IRQHandler+0x2d2>
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	0a5b      	lsrs	r3, r3, #9
 8001ffe:	f003 0301 	and.w	r3, r3, #1
 8002002:	2b00      	cmp	r3, #0
 8002004:	d02d      	beq.n	8002062 <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f000 feea 	bl	8002de0 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800200c:	e029      	b.n	8002062 <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	099b      	lsrs	r3, r3, #6
 8002012:	f003 0301 	and.w	r3, r3, #1
 8002016:	2b00      	cmp	r3, #0
 8002018:	d00f      	beq.n	800203a <HAL_I2C_EV_IRQHandler+0x2aa>
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	0a9b      	lsrs	r3, r3, #10
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	2b00      	cmp	r3, #0
 8002024:	d009      	beq.n	800203a <HAL_I2C_EV_IRQHandler+0x2aa>
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	089b      	lsrs	r3, r3, #2
 800202a:	f003 0301 	and.w	r3, r3, #1
 800202e:	2b00      	cmp	r3, #0
 8002030:	d103      	bne.n	800203a <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f000 fef5 	bl	8002e22 <I2C_SlaveReceive_RXNE>
 8002038:	e014      	b.n	8002064 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	089b      	lsrs	r3, r3, #2
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	2b00      	cmp	r3, #0
 8002044:	d00e      	beq.n	8002064 <HAL_I2C_EV_IRQHandler+0x2d4>
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	0a5b      	lsrs	r3, r3, #9
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	2b00      	cmp	r3, #0
 8002050:	d008      	beq.n	8002064 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 ff23 	bl	8002e9e <I2C_SlaveReceive_BTF>
 8002058:	e004      	b.n	8002064 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 800205a:	bf00      	nop
 800205c:	e002      	b.n	8002064 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800205e:	bf00      	nop
 8002060:	e000      	b.n	8002064 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002062:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002064:	3720      	adds	r7, #32
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800206a:	b580      	push	{r7, lr}
 800206c:	b08a      	sub	sp, #40	; 0x28
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	695b      	ldr	r3, [r3, #20]
 8002078:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002082:	2300      	movs	r3, #0
 8002084:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800208c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800208e:	6a3b      	ldr	r3, [r7, #32]
 8002090:	0a1b      	lsrs	r3, r3, #8
 8002092:	f003 0301 	and.w	r3, r3, #1
 8002096:	2b00      	cmp	r3, #0
 8002098:	d00e      	beq.n	80020b8 <HAL_I2C_ER_IRQHandler+0x4e>
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	0a1b      	lsrs	r3, r3, #8
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d008      	beq.n	80020b8 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80020a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a8:	f043 0301 	orr.w	r3, r3, #1
 80020ac:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80020b6:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80020b8:	6a3b      	ldr	r3, [r7, #32]
 80020ba:	0a5b      	lsrs	r3, r3, #9
 80020bc:	f003 0301 	and.w	r3, r3, #1
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d00e      	beq.n	80020e2 <HAL_I2C_ER_IRQHandler+0x78>
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	0a1b      	lsrs	r3, r3, #8
 80020c8:	f003 0301 	and.w	r3, r3, #1
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d008      	beq.n	80020e2 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80020d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d2:	f043 0302 	orr.w	r3, r3, #2
 80020d6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80020e0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80020e2:	6a3b      	ldr	r3, [r7, #32]
 80020e4:	0a9b      	lsrs	r3, r3, #10
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d03f      	beq.n	800216e <HAL_I2C_ER_IRQHandler+0x104>
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	0a1b      	lsrs	r3, r3, #8
 80020f2:	f003 0301 	and.w	r3, r3, #1
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d039      	beq.n	800216e <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80020fa:	7efb      	ldrb	r3, [r7, #27]
 80020fc:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002102:	b29b      	uxth	r3, r3
 8002104:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800210c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002112:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002114:	7ebb      	ldrb	r3, [r7, #26]
 8002116:	2b20      	cmp	r3, #32
 8002118:	d112      	bne.n	8002140 <HAL_I2C_ER_IRQHandler+0xd6>
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d10f      	bne.n	8002140 <HAL_I2C_ER_IRQHandler+0xd6>
 8002120:	7cfb      	ldrb	r3, [r7, #19]
 8002122:	2b21      	cmp	r3, #33	; 0x21
 8002124:	d008      	beq.n	8002138 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002126:	7cfb      	ldrb	r3, [r7, #19]
 8002128:	2b29      	cmp	r3, #41	; 0x29
 800212a:	d005      	beq.n	8002138 <HAL_I2C_ER_IRQHandler+0xce>
 800212c:	7cfb      	ldrb	r3, [r7, #19]
 800212e:	2b28      	cmp	r3, #40	; 0x28
 8002130:	d106      	bne.n	8002140 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2b21      	cmp	r3, #33	; 0x21
 8002136:	d103      	bne.n	8002140 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f001 f847 	bl	80031cc <I2C_Slave_AF>
 800213e:	e016      	b.n	800216e <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002148:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800214a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214c:	f043 0304 	orr.w	r3, r3, #4
 8002150:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002152:	7efb      	ldrb	r3, [r7, #27]
 8002154:	2b10      	cmp	r3, #16
 8002156:	d002      	beq.n	800215e <HAL_I2C_ER_IRQHandler+0xf4>
 8002158:	7efb      	ldrb	r3, [r7, #27]
 800215a:	2b40      	cmp	r3, #64	; 0x40
 800215c:	d107      	bne.n	800216e <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800216c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800216e:	6a3b      	ldr	r3, [r7, #32]
 8002170:	0adb      	lsrs	r3, r3, #11
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	2b00      	cmp	r3, #0
 8002178:	d00e      	beq.n	8002198 <HAL_I2C_ER_IRQHandler+0x12e>
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	0a1b      	lsrs	r3, r3, #8
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	2b00      	cmp	r3, #0
 8002184:	d008      	beq.n	8002198 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002188:	f043 0308 	orr.w	r3, r3, #8
 800218c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8002196:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219a:	2b00      	cmp	r3, #0
 800219c:	d008      	beq.n	80021b0 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a4:	431a      	orrs	r2, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f001 f87e 	bl	80032ac <I2C_ITError>
  }
}
 80021b0:	bf00      	nop
 80021b2:	3728      	adds	r7, #40	; 0x28
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80021c0:	bf00      	nop
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80021d4:	bf00      	nop
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80021e8:	bf00      	nop
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80021fc:	bf00      	nop
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	460b      	mov	r3, r1
 8002212:	70fb      	strb	r3, [r7, #3]
 8002214:	4613      	mov	r3, r2
 8002216:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002218:	bf00      	nop
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800222c:	bf00      	nop
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002240:	bf00      	nop
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002254:	bf00      	nop
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002268:	bf00      	nop
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800227c:	bf00      	nop
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002296:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800229e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d150      	bne.n	8002350 <I2C_MasterTransmit_TXE+0xc8>
 80022ae:	7bfb      	ldrb	r3, [r7, #15]
 80022b0:	2b21      	cmp	r3, #33	; 0x21
 80022b2:	d14d      	bne.n	8002350 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	2b08      	cmp	r3, #8
 80022b8:	d01d      	beq.n	80022f6 <I2C_MasterTransmit_TXE+0x6e>
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	2b20      	cmp	r3, #32
 80022be:	d01a      	beq.n	80022f6 <I2C_MasterTransmit_TXE+0x6e>
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80022c6:	d016      	beq.n	80022f6 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	685a      	ldr	r2, [r3, #4]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80022d6:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2211      	movs	r2, #17
 80022dc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2220      	movs	r2, #32
 80022ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f7ff ff62 	bl	80021b8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80022f4:	e060      	b.n	80023b8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	685a      	ldr	r2, [r3, #4]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002304:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002314:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2220      	movs	r2, #32
 8002320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800232a:	b2db      	uxtb	r3, r3
 800232c:	2b40      	cmp	r3, #64	; 0x40
 800232e:	d107      	bne.n	8002340 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2200      	movs	r2, #0
 8002334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f7ff ff7d 	bl	8002238 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800233e:	e03b      	b.n	80023b8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2200      	movs	r2, #0
 8002344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f7ff ff35 	bl	80021b8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800234e:	e033      	b.n	80023b8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002350:	7bfb      	ldrb	r3, [r7, #15]
 8002352:	2b21      	cmp	r3, #33	; 0x21
 8002354:	d005      	beq.n	8002362 <I2C_MasterTransmit_TXE+0xda>
 8002356:	7bbb      	ldrb	r3, [r7, #14]
 8002358:	2b40      	cmp	r3, #64	; 0x40
 800235a:	d12d      	bne.n	80023b8 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800235c:	7bfb      	ldrb	r3, [r7, #15]
 800235e:	2b22      	cmp	r3, #34	; 0x22
 8002360:	d12a      	bne.n	80023b8 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002366:	b29b      	uxth	r3, r3
 8002368:	2b00      	cmp	r3, #0
 800236a:	d108      	bne.n	800237e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	685a      	ldr	r2, [r3, #4]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800237a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800237c:	e01c      	b.n	80023b8 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002384:	b2db      	uxtb	r3, r3
 8002386:	2b40      	cmp	r3, #64	; 0x40
 8002388:	d103      	bne.n	8002392 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f000 f880 	bl	8002490 <I2C_MemoryTransmit_TXE_BTF>
}
 8002390:	e012      	b.n	80023b8 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002396:	781a      	ldrb	r2, [r3, #0]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a2:	1c5a      	adds	r2, r3, #1
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	3b01      	subs	r3, #1
 80023b0:	b29a      	uxth	r2, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80023b6:	e7ff      	b.n	80023b8 <I2C_MasterTransmit_TXE+0x130>
 80023b8:	bf00      	nop
 80023ba:	3710      	adds	r7, #16
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023cc:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	2b21      	cmp	r3, #33	; 0x21
 80023d8:	d156      	bne.n	8002488 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023de:	b29b      	uxth	r3, r3
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d012      	beq.n	800240a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e8:	781a      	ldrb	r2, [r3, #0]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f4:	1c5a      	adds	r2, r3, #1
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023fe:	b29b      	uxth	r3, r3
 8002400:	3b01      	subs	r3, #1
 8002402:	b29a      	uxth	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002408:	e03e      	b.n	8002488 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2b08      	cmp	r3, #8
 800240e:	d01d      	beq.n	800244c <I2C_MasterTransmit_BTF+0x8c>
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2b20      	cmp	r3, #32
 8002414:	d01a      	beq.n	800244c <I2C_MasterTransmit_BTF+0x8c>
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800241c:	d016      	beq.n	800244c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	685a      	ldr	r2, [r3, #4]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800242c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2211      	movs	r2, #17
 8002432:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2200      	movs	r2, #0
 8002438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2220      	movs	r2, #32
 8002440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f7ff feb7 	bl	80021b8 <HAL_I2C_MasterTxCpltCallback>
}
 800244a:	e01d      	b.n	8002488 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	685a      	ldr	r2, [r3, #4]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800245a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800246a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2220      	movs	r2, #32
 8002476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f7ff fe98 	bl	80021b8 <HAL_I2C_MasterTxCpltCallback>
}
 8002488:	bf00      	nop
 800248a:	3710      	adds	r7, #16
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}

08002490 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800249e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d11d      	bne.n	80024e4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d10b      	bne.n	80024c8 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024b4:	b2da      	uxtb	r2, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024c0:	1c9a      	adds	r2, r3, #2
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80024c6:	e06e      	b.n	80025a6 <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	121b      	asrs	r3, r3, #8
 80024d0:	b2da      	uxtb	r2, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024dc:	1c5a      	adds	r2, r3, #1
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80024e2:	e060      	b.n	80025a6 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d10b      	bne.n	8002504 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024f0:	b2da      	uxtb	r2, r3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024fc:	1c5a      	adds	r2, r3, #1
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002502:	e050      	b.n	80025a6 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002508:	2b02      	cmp	r3, #2
 800250a:	d14c      	bne.n	80025a6 <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800250c:	7bfb      	ldrb	r3, [r7, #15]
 800250e:	2b22      	cmp	r3, #34	; 0x22
 8002510:	d108      	bne.n	8002524 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002520:	601a      	str	r2, [r3, #0]
}
 8002522:	e040      	b.n	80025a6 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002528:	b29b      	uxth	r3, r3
 800252a:	2b00      	cmp	r3, #0
 800252c:	d015      	beq.n	800255a <I2C_MemoryTransmit_TXE_BTF+0xca>
 800252e:	7bfb      	ldrb	r3, [r7, #15]
 8002530:	2b21      	cmp	r3, #33	; 0x21
 8002532:	d112      	bne.n	800255a <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002538:	781a      	ldrb	r2, [r3, #0]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002544:	1c5a      	adds	r2, r3, #1
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800254e:	b29b      	uxth	r3, r3
 8002550:	3b01      	subs	r3, #1
 8002552:	b29a      	uxth	r2, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002558:	e025      	b.n	80025a6 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800255e:	b29b      	uxth	r3, r3
 8002560:	2b00      	cmp	r3, #0
 8002562:	d120      	bne.n	80025a6 <I2C_MemoryTransmit_TXE_BTF+0x116>
 8002564:	7bfb      	ldrb	r3, [r7, #15]
 8002566:	2b21      	cmp	r3, #33	; 0x21
 8002568:	d11d      	bne.n	80025a6 <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	685a      	ldr	r2, [r3, #4]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002578:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002588:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2220      	movs	r2, #32
 8002594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f7ff fe49 	bl	8002238 <HAL_I2C_MemTxCpltCallback>
}
 80025a6:	bf00      	nop
 80025a8:	3710      	adds	r7, #16
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b084      	sub	sp, #16
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	2b22      	cmp	r3, #34	; 0x22
 80025c0:	f040 80a2 	bne.w	8002708 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2b03      	cmp	r3, #3
 80025d0:	d921      	bls.n	8002616 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	691a      	ldr	r2, [r3, #16]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025dc:	b2d2      	uxtb	r2, r2
 80025de:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e4:	1c5a      	adds	r2, r3, #1
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	3b01      	subs	r3, #1
 80025f2:	b29a      	uxth	r2, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	2b03      	cmp	r3, #3
 8002600:	f040 8082 	bne.w	8002708 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	685a      	ldr	r2, [r3, #4]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002612:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8002614:	e078      	b.n	8002708 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800261a:	2b02      	cmp	r3, #2
 800261c:	d074      	beq.n	8002708 <I2C_MasterReceive_RXNE+0x15a>
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2b01      	cmp	r3, #1
 8002622:	d002      	beq.n	800262a <I2C_MasterReceive_RXNE+0x7c>
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d16e      	bne.n	8002708 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f001 fa88 	bl	8003b40 <I2C_WaitOnSTOPRequestThroughIT>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d142      	bne.n	80026bc <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002644:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	685a      	ldr	r2, [r3, #4]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002654:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	691a      	ldr	r2, [r3, #16]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002660:	b2d2      	uxtb	r2, r2
 8002662:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002668:	1c5a      	adds	r2, r3, #1
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002672:	b29b      	uxth	r3, r3
 8002674:	3b01      	subs	r3, #1
 8002676:	b29a      	uxth	r2, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2220      	movs	r2, #32
 8002680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800268a:	b2db      	uxtb	r3, r3
 800268c:	2b40      	cmp	r3, #64	; 0x40
 800268e:	d10a      	bne.n	80026a6 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f7ff fdd4 	bl	800224c <HAL_I2C_MemRxCpltCallback>
}
 80026a4:	e030      	b.n	8002708 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2212      	movs	r2, #18
 80026b2:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	f7ff fd89 	bl	80021cc <HAL_I2C_MasterRxCpltCallback>
}
 80026ba:	e025      	b.n	8002708 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	685a      	ldr	r2, [r3, #4]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80026ca:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	691a      	ldr	r2, [r3, #16]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d6:	b2d2      	uxtb	r2, r2
 80026d8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026de:	1c5a      	adds	r2, r3, #1
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	3b01      	subs	r3, #1
 80026ec:	b29a      	uxth	r2, r3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2220      	movs	r2, #32
 80026f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f7ff fdac 	bl	8002260 <HAL_I2C_ErrorCallback>
}
 8002708:	bf00      	nop
 800270a:	3710      	adds	r7, #16
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}

08002710 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800271c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002722:	b29b      	uxth	r3, r3
 8002724:	2b04      	cmp	r3, #4
 8002726:	d11b      	bne.n	8002760 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	685a      	ldr	r2, [r3, #4]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002736:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	691a      	ldr	r2, [r3, #16]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002742:	b2d2      	uxtb	r2, r2
 8002744:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274a:	1c5a      	adds	r2, r3, #1
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002754:	b29b      	uxth	r3, r3
 8002756:	3b01      	subs	r3, #1
 8002758:	b29a      	uxth	r2, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800275e:	e0bd      	b.n	80028dc <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002764:	b29b      	uxth	r3, r3
 8002766:	2b03      	cmp	r3, #3
 8002768:	d129      	bne.n	80027be <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	685a      	ldr	r2, [r3, #4]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002778:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2b04      	cmp	r3, #4
 800277e:	d00a      	beq.n	8002796 <I2C_MasterReceive_BTF+0x86>
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2b02      	cmp	r3, #2
 8002784:	d007      	beq.n	8002796 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002794:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	691a      	ldr	r2, [r3, #16]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a0:	b2d2      	uxtb	r2, r2
 80027a2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a8:	1c5a      	adds	r2, r3, #1
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	3b01      	subs	r3, #1
 80027b6:	b29a      	uxth	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80027bc:	e08e      	b.n	80028dc <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d176      	bne.n	80028b6 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d002      	beq.n	80027d4 <I2C_MasterReceive_BTF+0xc4>
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2b10      	cmp	r3, #16
 80027d2:	d108      	bne.n	80027e6 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027e2:	601a      	str	r2, [r3, #0]
 80027e4:	e019      	b.n	800281a <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2b04      	cmp	r3, #4
 80027ea:	d002      	beq.n	80027f2 <I2C_MasterReceive_BTF+0xe2>
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d108      	bne.n	8002804 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002800:	601a      	str	r2, [r3, #0]
 8002802:	e00a      	b.n	800281a <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2b10      	cmp	r3, #16
 8002808:	d007      	beq.n	800281a <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002818:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	691a      	ldr	r2, [r3, #16]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002824:	b2d2      	uxtb	r2, r2
 8002826:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282c:	1c5a      	adds	r2, r3, #1
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002836:	b29b      	uxth	r3, r3
 8002838:	3b01      	subs	r3, #1
 800283a:	b29a      	uxth	r2, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	691a      	ldr	r2, [r3, #16]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284a:	b2d2      	uxtb	r2, r2
 800284c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002852:	1c5a      	adds	r2, r3, #1
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800285c:	b29b      	uxth	r3, r3
 800285e:	3b01      	subs	r3, #1
 8002860:	b29a      	uxth	r2, r3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	685a      	ldr	r2, [r3, #4]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002874:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2220      	movs	r2, #32
 800287a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002884:	b2db      	uxtb	r3, r3
 8002886:	2b40      	cmp	r3, #64	; 0x40
 8002888:	d10a      	bne.n	80028a0 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f7ff fcd7 	bl	800224c <HAL_I2C_MemRxCpltCallback>
}
 800289e:	e01d      	b.n	80028dc <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2212      	movs	r2, #18
 80028ac:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f7ff fc8c 	bl	80021cc <HAL_I2C_MasterRxCpltCallback>
}
 80028b4:	e012      	b.n	80028dc <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	691a      	ldr	r2, [r3, #16]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c0:	b2d2      	uxtb	r2, r2
 80028c2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c8:	1c5a      	adds	r2, r3, #1
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	3b01      	subs	r3, #1
 80028d6:	b29a      	uxth	r2, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80028dc:	bf00      	nop
 80028de:	3710      	adds	r7, #16
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	2b40      	cmp	r3, #64	; 0x40
 80028f6:	d117      	bne.n	8002928 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d109      	bne.n	8002914 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002904:	b2db      	uxtb	r3, r3
 8002906:	461a      	mov	r2, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002910:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002912:	e067      	b.n	80029e4 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002918:	b2db      	uxtb	r3, r3
 800291a:	f043 0301 	orr.w	r3, r3, #1
 800291e:	b2da      	uxtb	r2, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	611a      	str	r2, [r3, #16]
}
 8002926:	e05d      	b.n	80029e4 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	691b      	ldr	r3, [r3, #16]
 800292c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002930:	d133      	bne.n	800299a <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002938:	b2db      	uxtb	r3, r3
 800293a:	2b21      	cmp	r3, #33	; 0x21
 800293c:	d109      	bne.n	8002952 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002942:	b2db      	uxtb	r3, r3
 8002944:	461a      	mov	r2, r3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800294e:	611a      	str	r2, [r3, #16]
 8002950:	e008      	b.n	8002964 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002956:	b2db      	uxtb	r3, r3
 8002958:	f043 0301 	orr.w	r3, r3, #1
 800295c:	b2da      	uxtb	r2, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002968:	2b00      	cmp	r3, #0
 800296a:	d004      	beq.n	8002976 <I2C_Master_SB+0x92>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002972:	2b00      	cmp	r3, #0
 8002974:	d108      	bne.n	8002988 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800297a:	2b00      	cmp	r3, #0
 800297c:	d032      	beq.n	80029e4 <I2C_Master_SB+0x100>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002982:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002984:	2b00      	cmp	r3, #0
 8002986:	d02d      	beq.n	80029e4 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	685a      	ldr	r2, [r3, #4]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002996:	605a      	str	r2, [r3, #4]
}
 8002998:	e024      	b.n	80029e4 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d10e      	bne.n	80029c0 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	11db      	asrs	r3, r3, #7
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	f003 0306 	and.w	r3, r3, #6
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	f063 030f 	orn	r3, r3, #15
 80029b6:	b2da      	uxtb	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	611a      	str	r2, [r3, #16]
}
 80029be:	e011      	b.n	80029e4 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d10d      	bne.n	80029e4 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	11db      	asrs	r3, r3, #7
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	f003 0306 	and.w	r3, r3, #6
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	f063 030e 	orn	r3, r3, #14
 80029dc:	b2da      	uxtb	r2, r3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	611a      	str	r2, [r3, #16]
}
 80029e4:	bf00      	nop
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr

080029f0 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fc:	b2da      	uxtb	r2, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d004      	beq.n	8002a16 <I2C_Master_ADD10+0x26>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d108      	bne.n	8002a28 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d00c      	beq.n	8002a38 <I2C_Master_ADD10+0x48>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d007      	beq.n	8002a38 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	685a      	ldr	r2, [r3, #4]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a36:	605a      	str	r2, [r3, #4]
  }
}
 8002a38:	bf00      	nop
 8002a3a:	370c      	adds	r7, #12
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr

08002a44 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b091      	sub	sp, #68	; 0x44
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a52:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a5a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a60:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	2b22      	cmp	r3, #34	; 0x22
 8002a6c:	f040 8169 	bne.w	8002d42 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d10f      	bne.n	8002a98 <I2C_Master_ADDR+0x54>
 8002a78:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002a7c:	2b40      	cmp	r3, #64	; 0x40
 8002a7e:	d10b      	bne.n	8002a98 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a80:	2300      	movs	r3, #0
 8002a82:	633b      	str	r3, [r7, #48]	; 0x30
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	695b      	ldr	r3, [r3, #20]
 8002a8a:	633b      	str	r3, [r7, #48]	; 0x30
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	699b      	ldr	r3, [r3, #24]
 8002a92:	633b      	str	r3, [r7, #48]	; 0x30
 8002a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a96:	e160      	b.n	8002d5a <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d11d      	bne.n	8002adc <I2C_Master_ADDR+0x98>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	691b      	ldr	r3, [r3, #16]
 8002aa4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002aa8:	d118      	bne.n	8002adc <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002aaa:	2300      	movs	r3, #0
 8002aac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	695b      	ldr	r3, [r3, #20]
 8002ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	699b      	ldr	r3, [r3, #24]
 8002abc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ace:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ad4:	1c5a      	adds	r2, r3, #1
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	651a      	str	r2, [r3, #80]	; 0x50
 8002ada:	e13e      	b.n	8002d5a <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d113      	bne.n	8002b0e <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	695b      	ldr	r3, [r3, #20]
 8002af0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	699b      	ldr	r3, [r3, #24]
 8002af8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002afa:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b0a:	601a      	str	r2, [r3, #0]
 8002b0c:	e115      	b.n	8002d3a <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	f040 808a 	bne.w	8002c2e <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b1c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b20:	d137      	bne.n	8002b92 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b30:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b40:	d113      	bne.n	8002b6a <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b50:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b52:	2300      	movs	r3, #0
 8002b54:	627b      	str	r3, [r7, #36]	; 0x24
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	695b      	ldr	r3, [r3, #20]
 8002b5c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	699b      	ldr	r3, [r3, #24]
 8002b64:	627b      	str	r3, [r7, #36]	; 0x24
 8002b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b68:	e0e7      	b.n	8002d3a <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	623b      	str	r3, [r7, #32]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	695b      	ldr	r3, [r3, #20]
 8002b74:	623b      	str	r3, [r7, #32]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	699b      	ldr	r3, [r3, #24]
 8002b7c:	623b      	str	r3, [r7, #32]
 8002b7e:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b8e:	601a      	str	r2, [r3, #0]
 8002b90:	e0d3      	b.n	8002d3a <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b94:	2b08      	cmp	r3, #8
 8002b96:	d02e      	beq.n	8002bf6 <I2C_Master_ADDR+0x1b2>
 8002b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b9a:	2b20      	cmp	r3, #32
 8002b9c:	d02b      	beq.n	8002bf6 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ba0:	2b12      	cmp	r3, #18
 8002ba2:	d102      	bne.n	8002baa <I2C_Master_ADDR+0x166>
 8002ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d125      	bne.n	8002bf6 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bac:	2b04      	cmp	r3, #4
 8002bae:	d00e      	beq.n	8002bce <I2C_Master_ADDR+0x18a>
 8002bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d00b      	beq.n	8002bce <I2C_Master_ADDR+0x18a>
 8002bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bb8:	2b10      	cmp	r3, #16
 8002bba:	d008      	beq.n	8002bce <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bca:	601a      	str	r2, [r3, #0]
 8002bcc:	e007      	b.n	8002bde <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002bdc:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bde:	2300      	movs	r3, #0
 8002be0:	61fb      	str	r3, [r7, #28]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	695b      	ldr	r3, [r3, #20]
 8002be8:	61fb      	str	r3, [r7, #28]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	699b      	ldr	r3, [r3, #24]
 8002bf0:	61fb      	str	r3, [r7, #28]
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	e0a1      	b.n	8002d3a <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c04:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c06:	2300      	movs	r3, #0
 8002c08:	61bb      	str	r3, [r7, #24]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	695b      	ldr	r3, [r3, #20]
 8002c10:	61bb      	str	r3, [r7, #24]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	699b      	ldr	r3, [r3, #24]
 8002c18:	61bb      	str	r3, [r7, #24]
 8002c1a:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c2a:	601a      	str	r2, [r3, #0]
 8002c2c:	e085      	b.n	8002d3a <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d14d      	bne.n	8002cd4 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c3a:	2b04      	cmp	r3, #4
 8002c3c:	d016      	beq.n	8002c6c <I2C_Master_ADDR+0x228>
 8002c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d013      	beq.n	8002c6c <I2C_Master_ADDR+0x228>
 8002c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c46:	2b10      	cmp	r3, #16
 8002c48:	d010      	beq.n	8002c6c <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c58:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c68:	601a      	str	r2, [r3, #0]
 8002c6a:	e007      	b.n	8002c7c <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c7a:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c8a:	d117      	bne.n	8002cbc <I2C_Master_ADDR+0x278>
 8002c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c8e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c92:	d00b      	beq.n	8002cac <I2C_Master_ADDR+0x268>
 8002c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d008      	beq.n	8002cac <I2C_Master_ADDR+0x268>
 8002c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c9c:	2b08      	cmp	r3, #8
 8002c9e:	d005      	beq.n	8002cac <I2C_Master_ADDR+0x268>
 8002ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ca2:	2b10      	cmp	r3, #16
 8002ca4:	d002      	beq.n	8002cac <I2C_Master_ADDR+0x268>
 8002ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ca8:	2b20      	cmp	r3, #32
 8002caa:	d107      	bne.n	8002cbc <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	685a      	ldr	r2, [r3, #4]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002cba:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	617b      	str	r3, [r7, #20]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	695b      	ldr	r3, [r3, #20]
 8002cc6:	617b      	str	r3, [r7, #20]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	699b      	ldr	r3, [r3, #24]
 8002cce:	617b      	str	r3, [r7, #20]
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	e032      	b.n	8002d3a <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ce2:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cf2:	d117      	bne.n	8002d24 <I2C_Master_ADDR+0x2e0>
 8002cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cf6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002cfa:	d00b      	beq.n	8002d14 <I2C_Master_ADDR+0x2d0>
 8002cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d008      	beq.n	8002d14 <I2C_Master_ADDR+0x2d0>
 8002d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d04:	2b08      	cmp	r3, #8
 8002d06:	d005      	beq.n	8002d14 <I2C_Master_ADDR+0x2d0>
 8002d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d0a:	2b10      	cmp	r3, #16
 8002d0c:	d002      	beq.n	8002d14 <I2C_Master_ADDR+0x2d0>
 8002d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d10:	2b20      	cmp	r3, #32
 8002d12:	d107      	bne.n	8002d24 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	685a      	ldr	r2, [r3, #4]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002d22:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d24:	2300      	movs	r3, #0
 8002d26:	613b      	str	r3, [r7, #16]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	695b      	ldr	r3, [r3, #20]
 8002d2e:	613b      	str	r3, [r7, #16]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	699b      	ldr	r3, [r3, #24]
 8002d36:	613b      	str	r3, [r7, #16]
 8002d38:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002d40:	e00b      	b.n	8002d5a <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d42:	2300      	movs	r3, #0
 8002d44:	60fb      	str	r3, [r7, #12]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	695b      	ldr	r3, [r3, #20]
 8002d4c:	60fb      	str	r3, [r7, #12]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	699b      	ldr	r3, [r3, #24]
 8002d54:	60fb      	str	r3, [r7, #12]
 8002d56:	68fb      	ldr	r3, [r7, #12]
}
 8002d58:	e7ff      	b.n	8002d5a <I2C_Master_ADDR+0x316>
 8002d5a:	bf00      	nop
 8002d5c:	3744      	adds	r7, #68	; 0x44
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr

08002d66 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b084      	sub	sp, #16
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d74:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d02b      	beq.n	8002dd8 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d84:	781a      	ldrb	r2, [r3, #0]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d90:	1c5a      	adds	r2, r3, #1
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	3b01      	subs	r3, #1
 8002d9e:	b29a      	uxth	r2, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d114      	bne.n	8002dd8 <I2C_SlaveTransmit_TXE+0x72>
 8002dae:	7bfb      	ldrb	r3, [r7, #15]
 8002db0:	2b29      	cmp	r3, #41	; 0x29
 8002db2:	d111      	bne.n	8002dd8 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	685a      	ldr	r2, [r3, #4]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dc2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2221      	movs	r2, #33	; 0x21
 8002dc8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2228      	movs	r2, #40	; 0x28
 8002dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f7ff fa04 	bl	80021e0 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002dd8:	bf00      	nop
 8002dda:	3710      	adds	r7, #16
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d011      	beq.n	8002e16 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df6:	781a      	ldrb	r2, [r3, #0]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e02:	1c5a      	adds	r2, r3, #1
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	3b01      	subs	r3, #1
 8002e10:	b29a      	uxth	r2, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002e16:	bf00      	nop
 8002e18:	370c      	adds	r7, #12
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr

08002e22 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002e22:	b580      	push	{r7, lr}
 8002e24:	b084      	sub	sp, #16
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e30:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d02c      	beq.n	8002e96 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	691a      	ldr	r2, [r3, #16]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e46:	b2d2      	uxtb	r2, r2
 8002e48:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4e:	1c5a      	adds	r2, r3, #1
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	3b01      	subs	r3, #1
 8002e5c:	b29a      	uxth	r2, r3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d114      	bne.n	8002e96 <I2C_SlaveReceive_RXNE+0x74>
 8002e6c:	7bfb      	ldrb	r3, [r7, #15]
 8002e6e:	2b2a      	cmp	r3, #42	; 0x2a
 8002e70:	d111      	bne.n	8002e96 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	685a      	ldr	r2, [r3, #4]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e80:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2222      	movs	r2, #34	; 0x22
 8002e86:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2228      	movs	r2, #40	; 0x28
 8002e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f7ff f9af 	bl	80021f4 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002e96:	bf00      	nop
 8002e98:	3710      	adds	r7, #16
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}

08002e9e <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002e9e:	b480      	push	{r7}
 8002ea0:	b083      	sub	sp, #12
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d012      	beq.n	8002ed6 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	691a      	ldr	r2, [r3, #16]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eba:	b2d2      	uxtb	r2, r2
 8002ebc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec2:	1c5a      	adds	r2, r3, #1
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	3b01      	subs	r3, #1
 8002ed0:	b29a      	uxth	r2, r3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002ed6:	bf00      	nop
 8002ed8:	370c      	adds	r7, #12
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr

08002ee2 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002ee2:	b580      	push	{r7, lr}
 8002ee4:	b084      	sub	sp, #16
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	6078      	str	r0, [r7, #4]
 8002eea:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002eec:	2300      	movs	r3, #0
 8002eee:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002efc:	2b28      	cmp	r3, #40	; 0x28
 8002efe:	d127      	bne.n	8002f50 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	685a      	ldr	r2, [r3, #4]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f0e:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	089b      	lsrs	r3, r3, #2
 8002f14:	f003 0301 	and.w	r3, r3, #1
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d101      	bne.n	8002f20 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	09db      	lsrs	r3, r3, #7
 8002f24:	f003 0301 	and.w	r3, r3, #1
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d103      	bne.n	8002f34 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	81bb      	strh	r3, [r7, #12]
 8002f32:	e002      	b.n	8002f3a <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	699b      	ldr	r3, [r3, #24]
 8002f38:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002f42:	89ba      	ldrh	r2, [r7, #12]
 8002f44:	7bfb      	ldrb	r3, [r7, #15]
 8002f46:	4619      	mov	r1, r3
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f7ff f95d 	bl	8002208 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002f4e:	e008      	b.n	8002f62 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f06f 0202 	mvn.w	r2, #2
 8002f58:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8002f62:	bf00      	nop
 8002f64:	3710      	adds	r7, #16
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
	...

08002f6c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f7a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	685a      	ldr	r2, [r3, #4]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002f8a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	60bb      	str	r3, [r7, #8]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	695b      	ldr	r3, [r3, #20]
 8002f96:	60bb      	str	r3, [r7, #8]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f042 0201 	orr.w	r2, r2, #1
 8002fa6:	601a      	str	r2, [r3, #0]
 8002fa8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fb8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fc8:	d172      	bne.n	80030b0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002fca:	7bfb      	ldrb	r3, [r7, #15]
 8002fcc:	2b22      	cmp	r3, #34	; 0x22
 8002fce:	d002      	beq.n	8002fd6 <I2C_Slave_STOPF+0x6a>
 8002fd0:	7bfb      	ldrb	r3, [r7, #15]
 8002fd2:	2b2a      	cmp	r3, #42	; 0x2a
 8002fd4:	d135      	bne.n	8003042 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	b29a      	uxth	r2, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d005      	beq.n	8002ffa <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff2:	f043 0204 	orr.w	r2, r3, #4
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	685a      	ldr	r2, [r3, #4]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003008:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800300e:	4618      	mov	r0, r3
 8003010:	f7fe f829 	bl	8001066 <HAL_DMA_GetState>
 8003014:	4603      	mov	r3, r0
 8003016:	2b01      	cmp	r3, #1
 8003018:	d049      	beq.n	80030ae <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800301e:	4a69      	ldr	r2, [pc, #420]	; (80031c4 <I2C_Slave_STOPF+0x258>)
 8003020:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003026:	4618      	mov	r0, r3
 8003028:	f7fd fffb 	bl	8001022 <HAL_DMA_Abort_IT>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d03d      	beq.n	80030ae <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003036:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800303c:	4610      	mov	r0, r2
 800303e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003040:	e035      	b.n	80030ae <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	b29a      	uxth	r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003054:	b29b      	uxth	r3, r3
 8003056:	2b00      	cmp	r3, #0
 8003058:	d005      	beq.n	8003066 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305e:	f043 0204 	orr.w	r2, r3, #4
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	685a      	ldr	r2, [r3, #4]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003074:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800307a:	4618      	mov	r0, r3
 800307c:	f7fd fff3 	bl	8001066 <HAL_DMA_GetState>
 8003080:	4603      	mov	r3, r0
 8003082:	2b01      	cmp	r3, #1
 8003084:	d014      	beq.n	80030b0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800308a:	4a4e      	ldr	r2, [pc, #312]	; (80031c4 <I2C_Slave_STOPF+0x258>)
 800308c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003092:	4618      	mov	r0, r3
 8003094:	f7fd ffc5 	bl	8001022 <HAL_DMA_Abort_IT>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d008      	beq.n	80030b0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80030a8:	4610      	mov	r0, r2
 80030aa:	4798      	blx	r3
 80030ac:	e000      	b.n	80030b0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80030ae:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d03e      	beq.n	8003138 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	695b      	ldr	r3, [r3, #20]
 80030c0:	f003 0304 	and.w	r3, r3, #4
 80030c4:	2b04      	cmp	r3, #4
 80030c6:	d112      	bne.n	80030ee <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	691a      	ldr	r2, [r3, #16]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d2:	b2d2      	uxtb	r2, r2
 80030d4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030da:	1c5a      	adds	r2, r3, #1
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	3b01      	subs	r3, #1
 80030e8:	b29a      	uxth	r2, r3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	695b      	ldr	r3, [r3, #20]
 80030f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030f8:	2b40      	cmp	r3, #64	; 0x40
 80030fa:	d112      	bne.n	8003122 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	691a      	ldr	r2, [r3, #16]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003106:	b2d2      	uxtb	r2, r2
 8003108:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310e:	1c5a      	adds	r2, r3, #1
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003118:	b29b      	uxth	r3, r3
 800311a:	3b01      	subs	r3, #1
 800311c:	b29a      	uxth	r2, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003126:	b29b      	uxth	r3, r3
 8003128:	2b00      	cmp	r3, #0
 800312a:	d005      	beq.n	8003138 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003130:	f043 0204 	orr.w	r2, r3, #4
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313c:	2b00      	cmp	r3, #0
 800313e:	d003      	beq.n	8003148 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f000 f8b3 	bl	80032ac <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003146:	e039      	b.n	80031bc <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003148:	7bfb      	ldrb	r3, [r7, #15]
 800314a:	2b2a      	cmp	r3, #42	; 0x2a
 800314c:	d109      	bne.n	8003162 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2228      	movs	r2, #40	; 0x28
 8003158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f7ff f849 	bl	80021f4 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003168:	b2db      	uxtb	r3, r3
 800316a:	2b28      	cmp	r3, #40	; 0x28
 800316c:	d111      	bne.n	8003192 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a15      	ldr	r2, [pc, #84]	; (80031c8 <I2C_Slave_STOPF+0x25c>)
 8003172:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2220      	movs	r2, #32
 800317e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f7ff f84a 	bl	8002224 <HAL_I2C_ListenCpltCallback>
}
 8003190:	e014      	b.n	80031bc <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003196:	2b22      	cmp	r3, #34	; 0x22
 8003198:	d002      	beq.n	80031a0 <I2C_Slave_STOPF+0x234>
 800319a:	7bfb      	ldrb	r3, [r7, #15]
 800319c:	2b22      	cmp	r3, #34	; 0x22
 800319e:	d10d      	bne.n	80031bc <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2220      	movs	r2, #32
 80031aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f7ff f81c 	bl	80021f4 <HAL_I2C_SlaveRxCpltCallback>
}
 80031bc:	bf00      	nop
 80031be:	3710      	adds	r7, #16
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	08003741 	.word	0x08003741
 80031c8:	ffff0000 	.word	0xffff0000

080031cc <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b084      	sub	sp, #16
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031da:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	2b08      	cmp	r3, #8
 80031e6:	d002      	beq.n	80031ee <I2C_Slave_AF+0x22>
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	2b20      	cmp	r3, #32
 80031ec:	d129      	bne.n	8003242 <I2C_Slave_AF+0x76>
 80031ee:	7bfb      	ldrb	r3, [r7, #15]
 80031f0:	2b28      	cmp	r3, #40	; 0x28
 80031f2:	d126      	bne.n	8003242 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	4a2c      	ldr	r2, [pc, #176]	; (80032a8 <I2C_Slave_AF+0xdc>)
 80031f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	685a      	ldr	r2, [r3, #4]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003208:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003212:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003222:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2200      	movs	r2, #0
 8003228:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2220      	movs	r2, #32
 800322e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f7fe fff2 	bl	8002224 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003240:	e02e      	b.n	80032a0 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003242:	7bfb      	ldrb	r3, [r7, #15]
 8003244:	2b21      	cmp	r3, #33	; 0x21
 8003246:	d126      	bne.n	8003296 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	4a17      	ldr	r2, [pc, #92]	; (80032a8 <I2C_Slave_AF+0xdc>)
 800324c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2221      	movs	r2, #33	; 0x21
 8003252:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2220      	movs	r2, #32
 8003258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	685a      	ldr	r2, [r3, #4]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003272:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800327c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800328c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f7fe ffa6 	bl	80021e0 <HAL_I2C_SlaveTxCpltCallback>
}
 8003294:	e004      	b.n	80032a0 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800329e:	615a      	str	r2, [r3, #20]
}
 80032a0:	bf00      	nop
 80032a2:	3710      	adds	r7, #16
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	ffff0000 	.word	0xffff0000

080032ac <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032ba:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032c2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80032c4:	7bbb      	ldrb	r3, [r7, #14]
 80032c6:	2b10      	cmp	r3, #16
 80032c8:	d002      	beq.n	80032d0 <I2C_ITError+0x24>
 80032ca:	7bbb      	ldrb	r3, [r7, #14]
 80032cc:	2b40      	cmp	r3, #64	; 0x40
 80032ce:	d10a      	bne.n	80032e6 <I2C_ITError+0x3a>
 80032d0:	7bfb      	ldrb	r3, [r7, #15]
 80032d2:	2b22      	cmp	r3, #34	; 0x22
 80032d4:	d107      	bne.n	80032e6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032e4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80032e6:	7bfb      	ldrb	r3, [r7, #15]
 80032e8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80032ec:	2b28      	cmp	r3, #40	; 0x28
 80032ee:	d107      	bne.n	8003300 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2228      	movs	r2, #40	; 0x28
 80032fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80032fe:	e015      	b.n	800332c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800330a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800330e:	d00a      	beq.n	8003326 <I2C_ITError+0x7a>
 8003310:	7bfb      	ldrb	r3, [r7, #15]
 8003312:	2b60      	cmp	r3, #96	; 0x60
 8003314:	d007      	beq.n	8003326 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2220      	movs	r2, #32
 800331a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003336:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800333a:	d162      	bne.n	8003402 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	685a      	ldr	r2, [r3, #4]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800334a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003350:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003354:	b2db      	uxtb	r3, r3
 8003356:	2b01      	cmp	r3, #1
 8003358:	d020      	beq.n	800339c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800335e:	4a6a      	ldr	r2, [pc, #424]	; (8003508 <I2C_ITError+0x25c>)
 8003360:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003366:	4618      	mov	r0, r3
 8003368:	f7fd fe5b 	bl	8001022 <HAL_DMA_Abort_IT>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	f000 8089 	beq.w	8003486 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f022 0201 	bic.w	r2, r2, #1
 8003382:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2220      	movs	r2, #32
 8003388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003390:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003396:	4610      	mov	r0, r2
 8003398:	4798      	blx	r3
 800339a:	e074      	b.n	8003486 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a0:	4a59      	ldr	r2, [pc, #356]	; (8003508 <I2C_ITError+0x25c>)
 80033a2:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7fd fe3a 	bl	8001022 <HAL_DMA_Abort_IT>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d068      	beq.n	8003486 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	695b      	ldr	r3, [r3, #20]
 80033ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033be:	2b40      	cmp	r3, #64	; 0x40
 80033c0:	d10b      	bne.n	80033da <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	691a      	ldr	r2, [r3, #16]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033cc:	b2d2      	uxtb	r2, r2
 80033ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d4:	1c5a      	adds	r2, r3, #1
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f022 0201 	bic.w	r2, r2, #1
 80033e8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2220      	movs	r2, #32
 80033ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80033fc:	4610      	mov	r0, r2
 80033fe:	4798      	blx	r3
 8003400:	e041      	b.n	8003486 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003408:	b2db      	uxtb	r3, r3
 800340a:	2b60      	cmp	r3, #96	; 0x60
 800340c:	d125      	bne.n	800345a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2220      	movs	r2, #32
 8003412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	695b      	ldr	r3, [r3, #20]
 8003422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003426:	2b40      	cmp	r3, #64	; 0x40
 8003428:	d10b      	bne.n	8003442 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	691a      	ldr	r2, [r3, #16]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003434:	b2d2      	uxtb	r2, r2
 8003436:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343c:	1c5a      	adds	r2, r3, #1
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f022 0201 	bic.w	r2, r2, #1
 8003450:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f7fe ff0e 	bl	8002274 <HAL_I2C_AbortCpltCallback>
 8003458:	e015      	b.n	8003486 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	695b      	ldr	r3, [r3, #20]
 8003460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003464:	2b40      	cmp	r3, #64	; 0x40
 8003466:	d10b      	bne.n	8003480 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	691a      	ldr	r2, [r3, #16]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003472:	b2d2      	uxtb	r2, r2
 8003474:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347a:	1c5a      	adds	r2, r3, #1
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f7fe feed 	bl	8002260 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	f003 0301 	and.w	r3, r3, #1
 8003492:	2b00      	cmp	r3, #0
 8003494:	d10e      	bne.n	80034b4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800349c:	2b00      	cmp	r3, #0
 800349e:	d109      	bne.n	80034b4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d104      	bne.n	80034b4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d007      	beq.n	80034c4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	685a      	ldr	r2, [r3, #4]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80034c2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034ca:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d0:	f003 0304 	and.w	r3, r3, #4
 80034d4:	2b04      	cmp	r3, #4
 80034d6:	d113      	bne.n	8003500 <I2C_ITError+0x254>
 80034d8:	7bfb      	ldrb	r3, [r7, #15]
 80034da:	2b28      	cmp	r3, #40	; 0x28
 80034dc:	d110      	bne.n	8003500 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4a0a      	ldr	r2, [pc, #40]	; (800350c <I2C_ITError+0x260>)
 80034e2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2220      	movs	r2, #32
 80034ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f7fe fe92 	bl	8002224 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003500:	bf00      	nop
 8003502:	3710      	adds	r7, #16
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	08003741 	.word	0x08003741
 800350c:	ffff0000 	.word	0xffff0000

08003510 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b088      	sub	sp, #32
 8003514:	af02      	add	r7, sp, #8
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	607a      	str	r2, [r7, #4]
 800351a:	603b      	str	r3, [r7, #0]
 800351c:	460b      	mov	r3, r1
 800351e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003524:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	2b08      	cmp	r3, #8
 800352a:	d006      	beq.n	800353a <I2C_MasterRequestWrite+0x2a>
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	2b01      	cmp	r3, #1
 8003530:	d003      	beq.n	800353a <I2C_MasterRequestWrite+0x2a>
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003538:	d108      	bne.n	800354c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003548:	601a      	str	r2, [r3, #0]
 800354a:	e00b      	b.n	8003564 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003550:	2b12      	cmp	r3, #18
 8003552:	d107      	bne.n	8003564 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003562:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	9300      	str	r3, [sp, #0]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003570:	68f8      	ldr	r0, [r7, #12]
 8003572:	f000 f98d 	bl	8003890 <I2C_WaitOnFlagUntilTimeout>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d00d      	beq.n	8003598 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003586:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800358a:	d103      	bne.n	8003594 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003592:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003594:	2303      	movs	r3, #3
 8003596:	e035      	b.n	8003604 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	691b      	ldr	r3, [r3, #16]
 800359c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035a0:	d108      	bne.n	80035b4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80035a2:	897b      	ldrh	r3, [r7, #10]
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	461a      	mov	r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80035b0:	611a      	str	r2, [r3, #16]
 80035b2:	e01b      	b.n	80035ec <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80035b4:	897b      	ldrh	r3, [r7, #10]
 80035b6:	11db      	asrs	r3, r3, #7
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	f003 0306 	and.w	r3, r3, #6
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	f063 030f 	orn	r3, r3, #15
 80035c4:	b2da      	uxtb	r2, r3
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	490e      	ldr	r1, [pc, #56]	; (800360c <I2C_MasterRequestWrite+0xfc>)
 80035d2:	68f8      	ldr	r0, [r7, #12]
 80035d4:	f000 f9b3 	bl	800393e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d001      	beq.n	80035e2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e010      	b.n	8003604 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80035e2:	897b      	ldrh	r3, [r7, #10]
 80035e4:	b2da      	uxtb	r2, r3
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	4907      	ldr	r1, [pc, #28]	; (8003610 <I2C_MasterRequestWrite+0x100>)
 80035f2:	68f8      	ldr	r0, [r7, #12]
 80035f4:	f000 f9a3 	bl	800393e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d001      	beq.n	8003602 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e000      	b.n	8003604 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003602:	2300      	movs	r3, #0
}
 8003604:	4618      	mov	r0, r3
 8003606:	3718      	adds	r7, #24
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}
 800360c:	00010008 	.word	0x00010008
 8003610:	00010002 	.word	0x00010002

08003614 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b088      	sub	sp, #32
 8003618:	af02      	add	r7, sp, #8
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	4608      	mov	r0, r1
 800361e:	4611      	mov	r1, r2
 8003620:	461a      	mov	r2, r3
 8003622:	4603      	mov	r3, r0
 8003624:	817b      	strh	r3, [r7, #10]
 8003626:	460b      	mov	r3, r1
 8003628:	813b      	strh	r3, [r7, #8]
 800362a:	4613      	mov	r3, r2
 800362c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800363c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800363e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003640:	9300      	str	r3, [sp, #0]
 8003642:	6a3b      	ldr	r3, [r7, #32]
 8003644:	2200      	movs	r2, #0
 8003646:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800364a:	68f8      	ldr	r0, [r7, #12]
 800364c:	f000 f920 	bl	8003890 <I2C_WaitOnFlagUntilTimeout>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d00d      	beq.n	8003672 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003660:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003664:	d103      	bne.n	800366e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f44f 7200 	mov.w	r2, #512	; 0x200
 800366c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e05f      	b.n	8003732 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003672:	897b      	ldrh	r3, [r7, #10]
 8003674:	b2db      	uxtb	r3, r3
 8003676:	461a      	mov	r2, r3
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003680:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003684:	6a3a      	ldr	r2, [r7, #32]
 8003686:	492d      	ldr	r1, [pc, #180]	; (800373c <I2C_RequestMemoryWrite+0x128>)
 8003688:	68f8      	ldr	r0, [r7, #12]
 800368a:	f000 f958 	bl	800393e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800368e:	4603      	mov	r3, r0
 8003690:	2b00      	cmp	r3, #0
 8003692:	d001      	beq.n	8003698 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e04c      	b.n	8003732 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003698:	2300      	movs	r3, #0
 800369a:	617b      	str	r3, [r7, #20]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	695b      	ldr	r3, [r3, #20]
 80036a2:	617b      	str	r3, [r7, #20]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	699b      	ldr	r3, [r3, #24]
 80036aa:	617b      	str	r3, [r7, #20]
 80036ac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036b0:	6a39      	ldr	r1, [r7, #32]
 80036b2:	68f8      	ldr	r0, [r7, #12]
 80036b4:	f000 f9c2 	bl	8003a3c <I2C_WaitOnTXEFlagUntilTimeout>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d00d      	beq.n	80036da <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c2:	2b04      	cmp	r3, #4
 80036c4:	d107      	bne.n	80036d6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036d4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e02b      	b.n	8003732 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80036da:	88fb      	ldrh	r3, [r7, #6]
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d105      	bne.n	80036ec <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80036e0:	893b      	ldrh	r3, [r7, #8]
 80036e2:	b2da      	uxtb	r2, r3
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	611a      	str	r2, [r3, #16]
 80036ea:	e021      	b.n	8003730 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80036ec:	893b      	ldrh	r3, [r7, #8]
 80036ee:	0a1b      	lsrs	r3, r3, #8
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	b2da      	uxtb	r2, r3
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036fc:	6a39      	ldr	r1, [r7, #32]
 80036fe:	68f8      	ldr	r0, [r7, #12]
 8003700:	f000 f99c 	bl	8003a3c <I2C_WaitOnTXEFlagUntilTimeout>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d00d      	beq.n	8003726 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370e:	2b04      	cmp	r3, #4
 8003710:	d107      	bne.n	8003722 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003720:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e005      	b.n	8003732 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003726:	893b      	ldrh	r3, [r7, #8]
 8003728:	b2da      	uxtb	r2, r3
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003730:	2300      	movs	r3, #0
}
 8003732:	4618      	mov	r0, r3
 8003734:	3718      	adds	r7, #24
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	00010002 	.word	0x00010002

08003740 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b086      	sub	sp, #24
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003748:	2300      	movs	r3, #0
 800374a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003750:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003758:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800375a:	4b4b      	ldr	r3, [pc, #300]	; (8003888 <I2C_DMAAbort+0x148>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	08db      	lsrs	r3, r3, #3
 8003760:	4a4a      	ldr	r2, [pc, #296]	; (800388c <I2C_DMAAbort+0x14c>)
 8003762:	fba2 2303 	umull	r2, r3, r2, r3
 8003766:	0a1a      	lsrs	r2, r3, #8
 8003768:	4613      	mov	r3, r2
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	4413      	add	r3, r2
 800376e:	00da      	lsls	r2, r3, #3
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d106      	bne.n	8003788 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377e:	f043 0220 	orr.w	r2, r3, #32
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8003786:	e00a      	b.n	800379e <I2C_DMAAbort+0x5e>
    }
    count--;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	3b01      	subs	r3, #1
 800378c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003798:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800379c:	d0ea      	beq.n	8003774 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d003      	beq.n	80037ae <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037aa:	2200      	movs	r2, #0
 80037ac:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d003      	beq.n	80037be <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ba:	2200      	movs	r2, #0
 80037bc:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037cc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	2200      	movs	r2, #0
 80037d2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d003      	beq.n	80037e4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037e0:	2200      	movs	r2, #0
 80037e2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d003      	beq.n	80037f4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f0:	2200      	movs	r2, #0
 80037f2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f022 0201 	bic.w	r2, r2, #1
 8003802:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800380a:	b2db      	uxtb	r3, r3
 800380c:	2b60      	cmp	r3, #96	; 0x60
 800380e:	d10e      	bne.n	800382e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	2220      	movs	r2, #32
 8003814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	2200      	movs	r2, #0
 800381c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	2200      	movs	r2, #0
 8003824:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003826:	6978      	ldr	r0, [r7, #20]
 8003828:	f7fe fd24 	bl	8002274 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800382c:	e027      	b.n	800387e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800382e:	7cfb      	ldrb	r3, [r7, #19]
 8003830:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003834:	2b28      	cmp	r3, #40	; 0x28
 8003836:	d117      	bne.n	8003868 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f042 0201 	orr.w	r2, r2, #1
 8003846:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003856:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	2200      	movs	r2, #0
 800385c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	2228      	movs	r2, #40	; 0x28
 8003862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003866:	e007      	b.n	8003878 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	2220      	movs	r2, #32
 800386c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	2200      	movs	r2, #0
 8003874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003878:	6978      	ldr	r0, [r7, #20]
 800387a:	f7fe fcf1 	bl	8002260 <HAL_I2C_ErrorCallback>
}
 800387e:	bf00      	nop
 8003880:	3718      	adds	r7, #24
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	20000018 	.word	0x20000018
 800388c:	14f8b589 	.word	0x14f8b589

08003890 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	60f8      	str	r0, [r7, #12]
 8003898:	60b9      	str	r1, [r7, #8]
 800389a:	603b      	str	r3, [r7, #0]
 800389c:	4613      	mov	r3, r2
 800389e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038a0:	e025      	b.n	80038ee <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038a8:	d021      	beq.n	80038ee <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038aa:	f7fd fa79 	bl	8000da0 <HAL_GetTick>
 80038ae:	4602      	mov	r2, r0
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	683a      	ldr	r2, [r7, #0]
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d302      	bcc.n	80038c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d116      	bne.n	80038ee <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2200      	movs	r2, #0
 80038c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2220      	movs	r2, #32
 80038ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038da:	f043 0220 	orr.w	r2, r3, #32
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e023      	b.n	8003936 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	0c1b      	lsrs	r3, r3, #16
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d10d      	bne.n	8003914 <I2C_WaitOnFlagUntilTimeout+0x84>
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	695b      	ldr	r3, [r3, #20]
 80038fe:	43da      	mvns	r2, r3
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	4013      	ands	r3, r2
 8003904:	b29b      	uxth	r3, r3
 8003906:	2b00      	cmp	r3, #0
 8003908:	bf0c      	ite	eq
 800390a:	2301      	moveq	r3, #1
 800390c:	2300      	movne	r3, #0
 800390e:	b2db      	uxtb	r3, r3
 8003910:	461a      	mov	r2, r3
 8003912:	e00c      	b.n	800392e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	699b      	ldr	r3, [r3, #24]
 800391a:	43da      	mvns	r2, r3
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	4013      	ands	r3, r2
 8003920:	b29b      	uxth	r3, r3
 8003922:	2b00      	cmp	r3, #0
 8003924:	bf0c      	ite	eq
 8003926:	2301      	moveq	r3, #1
 8003928:	2300      	movne	r3, #0
 800392a:	b2db      	uxtb	r3, r3
 800392c:	461a      	mov	r2, r3
 800392e:	79fb      	ldrb	r3, [r7, #7]
 8003930:	429a      	cmp	r2, r3
 8003932:	d0b6      	beq.n	80038a2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003934:	2300      	movs	r3, #0
}
 8003936:	4618      	mov	r0, r3
 8003938:	3710      	adds	r7, #16
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}

0800393e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800393e:	b580      	push	{r7, lr}
 8003940:	b084      	sub	sp, #16
 8003942:	af00      	add	r7, sp, #0
 8003944:	60f8      	str	r0, [r7, #12]
 8003946:	60b9      	str	r1, [r7, #8]
 8003948:	607a      	str	r2, [r7, #4]
 800394a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800394c:	e051      	b.n	80039f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	695b      	ldr	r3, [r3, #20]
 8003954:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003958:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800395c:	d123      	bne.n	80039a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800396c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003976:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2200      	movs	r2, #0
 800397c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2220      	movs	r2, #32
 8003982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003992:	f043 0204 	orr.w	r2, r3, #4
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2200      	movs	r2, #0
 800399e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e046      	b.n	8003a34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ac:	d021      	beq.n	80039f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039ae:	f7fd f9f7 	bl	8000da0 <HAL_GetTick>
 80039b2:	4602      	mov	r2, r0
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d302      	bcc.n	80039c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d116      	bne.n	80039f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2200      	movs	r2, #0
 80039c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2220      	movs	r2, #32
 80039ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2200      	movs	r2, #0
 80039d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039de:	f043 0220 	orr.w	r2, r3, #32
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2200      	movs	r2, #0
 80039ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e020      	b.n	8003a34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	0c1b      	lsrs	r3, r3, #16
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d10c      	bne.n	8003a16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	695b      	ldr	r3, [r3, #20]
 8003a02:	43da      	mvns	r2, r3
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	4013      	ands	r3, r2
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	bf14      	ite	ne
 8003a0e:	2301      	movne	r3, #1
 8003a10:	2300      	moveq	r3, #0
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	e00b      	b.n	8003a2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	699b      	ldr	r3, [r3, #24]
 8003a1c:	43da      	mvns	r2, r3
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	4013      	ands	r3, r2
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	bf14      	ite	ne
 8003a28:	2301      	movne	r3, #1
 8003a2a:	2300      	moveq	r3, #0
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d18d      	bne.n	800394e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003a32:	2300      	movs	r3, #0
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3710      	adds	r7, #16
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	60f8      	str	r0, [r7, #12]
 8003a44:	60b9      	str	r1, [r7, #8]
 8003a46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a48:	e02d      	b.n	8003aa6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a4a:	68f8      	ldr	r0, [r7, #12]
 8003a4c:	f000 f8aa 	bl	8003ba4 <I2C_IsAcknowledgeFailed>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d001      	beq.n	8003a5a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e02d      	b.n	8003ab6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a60:	d021      	beq.n	8003aa6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a62:	f7fd f99d 	bl	8000da0 <HAL_GetTick>
 8003a66:	4602      	mov	r2, r0
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	1ad3      	subs	r3, r2, r3
 8003a6c:	68ba      	ldr	r2, [r7, #8]
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d302      	bcc.n	8003a78 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d116      	bne.n	8003aa6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2220      	movs	r2, #32
 8003a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a92:	f043 0220 	orr.w	r2, r3, #32
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e007      	b.n	8003ab6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	695b      	ldr	r3, [r3, #20]
 8003aac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ab0:	2b80      	cmp	r3, #128	; 0x80
 8003ab2:	d1ca      	bne.n	8003a4a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ab4:	2300      	movs	r3, #0
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3710      	adds	r7, #16
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}

08003abe <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003abe:	b580      	push	{r7, lr}
 8003ac0:	b084      	sub	sp, #16
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	60f8      	str	r0, [r7, #12]
 8003ac6:	60b9      	str	r1, [r7, #8]
 8003ac8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003aca:	e02d      	b.n	8003b28 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003acc:	68f8      	ldr	r0, [r7, #12]
 8003ace:	f000 f869 	bl	8003ba4 <I2C_IsAcknowledgeFailed>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d001      	beq.n	8003adc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e02d      	b.n	8003b38 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ae2:	d021      	beq.n	8003b28 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ae4:	f7fd f95c 	bl	8000da0 <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	68ba      	ldr	r2, [r7, #8]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d302      	bcc.n	8003afa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d116      	bne.n	8003b28 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2200      	movs	r2, #0
 8003afe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2220      	movs	r2, #32
 8003b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b14:	f043 0220 	orr.w	r2, r3, #32
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e007      	b.n	8003b38 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	695b      	ldr	r3, [r3, #20]
 8003b2e:	f003 0304 	and.w	r3, r3, #4
 8003b32:	2b04      	cmp	r3, #4
 8003b34:	d1ca      	bne.n	8003acc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b36:	2300      	movs	r3, #0
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3710      	adds	r7, #16
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b085      	sub	sp, #20
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003b4c:	4b13      	ldr	r3, [pc, #76]	; (8003b9c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	08db      	lsrs	r3, r3, #3
 8003b52:	4a13      	ldr	r2, [pc, #76]	; (8003ba0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003b54:	fba2 2303 	umull	r2, r3, r2, r3
 8003b58:	0a1a      	lsrs	r2, r3, #8
 8003b5a:	4613      	mov	r3, r2
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	4413      	add	r3, r2
 8003b60:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	3b01      	subs	r3, #1
 8003b66:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d107      	bne.n	8003b7e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b72:	f043 0220 	orr.w	r2, r3, #32
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e008      	b.n	8003b90 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b8c:	d0e9      	beq.n	8003b62 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003b8e:	2300      	movs	r3, #0
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3714      	adds	r7, #20
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr
 8003b9c:	20000018 	.word	0x20000018
 8003ba0:	14f8b589 	.word	0x14f8b589

08003ba4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	695b      	ldr	r3, [r3, #20]
 8003bb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bba:	d11b      	bne.n	8003bf4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003bc4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2220      	movs	r2, #32
 8003bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be0:	f043 0204 	orr.w	r2, r3, #4
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2200      	movs	r2, #0
 8003bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e000      	b.n	8003bf6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003bf4:	2300      	movs	r3, #0
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	370c      	adds	r7, #12
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr

08003c02 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003c02:	b480      	push	{r7}
 8003c04:	b083      	sub	sp, #12
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c0e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003c12:	d103      	bne.n	8003c1c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2201      	movs	r2, #1
 8003c18:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003c1a:	e007      	b.n	8003c2c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c20:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003c24:	d102      	bne.n	8003c2c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2208      	movs	r2, #8
 8003c2a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003c2c:	bf00      	nop
 8003c2e:	370c      	adds	r7, #12
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b086      	sub	sp, #24
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d101      	bne.n	8003c4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e264      	b.n	8004114 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0301 	and.w	r3, r3, #1
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d075      	beq.n	8003d42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c56:	4ba3      	ldr	r3, [pc, #652]	; (8003ee4 <HAL_RCC_OscConfig+0x2ac>)
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	f003 030c 	and.w	r3, r3, #12
 8003c5e:	2b04      	cmp	r3, #4
 8003c60:	d00c      	beq.n	8003c7c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c62:	4ba0      	ldr	r3, [pc, #640]	; (8003ee4 <HAL_RCC_OscConfig+0x2ac>)
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c6a:	2b08      	cmp	r3, #8
 8003c6c:	d112      	bne.n	8003c94 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c6e:	4b9d      	ldr	r3, [pc, #628]	; (8003ee4 <HAL_RCC_OscConfig+0x2ac>)
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c7a:	d10b      	bne.n	8003c94 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c7c:	4b99      	ldr	r3, [pc, #612]	; (8003ee4 <HAL_RCC_OscConfig+0x2ac>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d05b      	beq.n	8003d40 <HAL_RCC_OscConfig+0x108>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d157      	bne.n	8003d40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e23f      	b.n	8004114 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c9c:	d106      	bne.n	8003cac <HAL_RCC_OscConfig+0x74>
 8003c9e:	4b91      	ldr	r3, [pc, #580]	; (8003ee4 <HAL_RCC_OscConfig+0x2ac>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a90      	ldr	r2, [pc, #576]	; (8003ee4 <HAL_RCC_OscConfig+0x2ac>)
 8003ca4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ca8:	6013      	str	r3, [r2, #0]
 8003caa:	e01d      	b.n	8003ce8 <HAL_RCC_OscConfig+0xb0>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cb4:	d10c      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x98>
 8003cb6:	4b8b      	ldr	r3, [pc, #556]	; (8003ee4 <HAL_RCC_OscConfig+0x2ac>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a8a      	ldr	r2, [pc, #552]	; (8003ee4 <HAL_RCC_OscConfig+0x2ac>)
 8003cbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cc0:	6013      	str	r3, [r2, #0]
 8003cc2:	4b88      	ldr	r3, [pc, #544]	; (8003ee4 <HAL_RCC_OscConfig+0x2ac>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a87      	ldr	r2, [pc, #540]	; (8003ee4 <HAL_RCC_OscConfig+0x2ac>)
 8003cc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ccc:	6013      	str	r3, [r2, #0]
 8003cce:	e00b      	b.n	8003ce8 <HAL_RCC_OscConfig+0xb0>
 8003cd0:	4b84      	ldr	r3, [pc, #528]	; (8003ee4 <HAL_RCC_OscConfig+0x2ac>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a83      	ldr	r2, [pc, #524]	; (8003ee4 <HAL_RCC_OscConfig+0x2ac>)
 8003cd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cda:	6013      	str	r3, [r2, #0]
 8003cdc:	4b81      	ldr	r3, [pc, #516]	; (8003ee4 <HAL_RCC_OscConfig+0x2ac>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a80      	ldr	r2, [pc, #512]	; (8003ee4 <HAL_RCC_OscConfig+0x2ac>)
 8003ce2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ce6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d013      	beq.n	8003d18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cf0:	f7fd f856 	bl	8000da0 <HAL_GetTick>
 8003cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cf6:	e008      	b.n	8003d0a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cf8:	f7fd f852 	bl	8000da0 <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	2b64      	cmp	r3, #100	; 0x64
 8003d04:	d901      	bls.n	8003d0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e204      	b.n	8004114 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d0a:	4b76      	ldr	r3, [pc, #472]	; (8003ee4 <HAL_RCC_OscConfig+0x2ac>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d0f0      	beq.n	8003cf8 <HAL_RCC_OscConfig+0xc0>
 8003d16:	e014      	b.n	8003d42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d18:	f7fd f842 	bl	8000da0 <HAL_GetTick>
 8003d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d1e:	e008      	b.n	8003d32 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d20:	f7fd f83e 	bl	8000da0 <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	2b64      	cmp	r3, #100	; 0x64
 8003d2c:	d901      	bls.n	8003d32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	e1f0      	b.n	8004114 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d32:	4b6c      	ldr	r3, [pc, #432]	; (8003ee4 <HAL_RCC_OscConfig+0x2ac>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d1f0      	bne.n	8003d20 <HAL_RCC_OscConfig+0xe8>
 8003d3e:	e000      	b.n	8003d42 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0302 	and.w	r3, r3, #2
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d063      	beq.n	8003e16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d4e:	4b65      	ldr	r3, [pc, #404]	; (8003ee4 <HAL_RCC_OscConfig+0x2ac>)
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	f003 030c 	and.w	r3, r3, #12
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d00b      	beq.n	8003d72 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d5a:	4b62      	ldr	r3, [pc, #392]	; (8003ee4 <HAL_RCC_OscConfig+0x2ac>)
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d62:	2b08      	cmp	r3, #8
 8003d64:	d11c      	bne.n	8003da0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d66:	4b5f      	ldr	r3, [pc, #380]	; (8003ee4 <HAL_RCC_OscConfig+0x2ac>)
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d116      	bne.n	8003da0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d72:	4b5c      	ldr	r3, [pc, #368]	; (8003ee4 <HAL_RCC_OscConfig+0x2ac>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0302 	and.w	r3, r3, #2
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d005      	beq.n	8003d8a <HAL_RCC_OscConfig+0x152>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d001      	beq.n	8003d8a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e1c4      	b.n	8004114 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d8a:	4b56      	ldr	r3, [pc, #344]	; (8003ee4 <HAL_RCC_OscConfig+0x2ac>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	00db      	lsls	r3, r3, #3
 8003d98:	4952      	ldr	r1, [pc, #328]	; (8003ee4 <HAL_RCC_OscConfig+0x2ac>)
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d9e:	e03a      	b.n	8003e16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d020      	beq.n	8003dea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003da8:	4b4f      	ldr	r3, [pc, #316]	; (8003ee8 <HAL_RCC_OscConfig+0x2b0>)
 8003daa:	2201      	movs	r2, #1
 8003dac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dae:	f7fc fff7 	bl	8000da0 <HAL_GetTick>
 8003db2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003db4:	e008      	b.n	8003dc8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003db6:	f7fc fff3 	bl	8000da0 <HAL_GetTick>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d901      	bls.n	8003dc8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e1a5      	b.n	8004114 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dc8:	4b46      	ldr	r3, [pc, #280]	; (8003ee4 <HAL_RCC_OscConfig+0x2ac>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0302 	and.w	r3, r3, #2
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d0f0      	beq.n	8003db6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dd4:	4b43      	ldr	r3, [pc, #268]	; (8003ee4 <HAL_RCC_OscConfig+0x2ac>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	691b      	ldr	r3, [r3, #16]
 8003de0:	00db      	lsls	r3, r3, #3
 8003de2:	4940      	ldr	r1, [pc, #256]	; (8003ee4 <HAL_RCC_OscConfig+0x2ac>)
 8003de4:	4313      	orrs	r3, r2
 8003de6:	600b      	str	r3, [r1, #0]
 8003de8:	e015      	b.n	8003e16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dea:	4b3f      	ldr	r3, [pc, #252]	; (8003ee8 <HAL_RCC_OscConfig+0x2b0>)
 8003dec:	2200      	movs	r2, #0
 8003dee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df0:	f7fc ffd6 	bl	8000da0 <HAL_GetTick>
 8003df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003df6:	e008      	b.n	8003e0a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003df8:	f7fc ffd2 	bl	8000da0 <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	2b02      	cmp	r3, #2
 8003e04:	d901      	bls.n	8003e0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e184      	b.n	8004114 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e0a:	4b36      	ldr	r3, [pc, #216]	; (8003ee4 <HAL_RCC_OscConfig+0x2ac>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0302 	and.w	r3, r3, #2
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d1f0      	bne.n	8003df8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0308 	and.w	r3, r3, #8
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d030      	beq.n	8003e84 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	695b      	ldr	r3, [r3, #20]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d016      	beq.n	8003e58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e2a:	4b30      	ldr	r3, [pc, #192]	; (8003eec <HAL_RCC_OscConfig+0x2b4>)
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e30:	f7fc ffb6 	bl	8000da0 <HAL_GetTick>
 8003e34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e36:	e008      	b.n	8003e4a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e38:	f7fc ffb2 	bl	8000da0 <HAL_GetTick>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	2b02      	cmp	r3, #2
 8003e44:	d901      	bls.n	8003e4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	e164      	b.n	8004114 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e4a:	4b26      	ldr	r3, [pc, #152]	; (8003ee4 <HAL_RCC_OscConfig+0x2ac>)
 8003e4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e4e:	f003 0302 	and.w	r3, r3, #2
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d0f0      	beq.n	8003e38 <HAL_RCC_OscConfig+0x200>
 8003e56:	e015      	b.n	8003e84 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e58:	4b24      	ldr	r3, [pc, #144]	; (8003eec <HAL_RCC_OscConfig+0x2b4>)
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e5e:	f7fc ff9f 	bl	8000da0 <HAL_GetTick>
 8003e62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e64:	e008      	b.n	8003e78 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e66:	f7fc ff9b 	bl	8000da0 <HAL_GetTick>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	d901      	bls.n	8003e78 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003e74:	2303      	movs	r3, #3
 8003e76:	e14d      	b.n	8004114 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e78:	4b1a      	ldr	r3, [pc, #104]	; (8003ee4 <HAL_RCC_OscConfig+0x2ac>)
 8003e7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e7c:	f003 0302 	and.w	r3, r3, #2
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d1f0      	bne.n	8003e66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 0304 	and.w	r3, r3, #4
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	f000 80a0 	beq.w	8003fd2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e92:	2300      	movs	r3, #0
 8003e94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e96:	4b13      	ldr	r3, [pc, #76]	; (8003ee4 <HAL_RCC_OscConfig+0x2ac>)
 8003e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d10f      	bne.n	8003ec2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	60bb      	str	r3, [r7, #8]
 8003ea6:	4b0f      	ldr	r3, [pc, #60]	; (8003ee4 <HAL_RCC_OscConfig+0x2ac>)
 8003ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eaa:	4a0e      	ldr	r2, [pc, #56]	; (8003ee4 <HAL_RCC_OscConfig+0x2ac>)
 8003eac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003eb0:	6413      	str	r3, [r2, #64]	; 0x40
 8003eb2:	4b0c      	ldr	r3, [pc, #48]	; (8003ee4 <HAL_RCC_OscConfig+0x2ac>)
 8003eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eba:	60bb      	str	r3, [r7, #8]
 8003ebc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ec2:	4b0b      	ldr	r3, [pc, #44]	; (8003ef0 <HAL_RCC_OscConfig+0x2b8>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d121      	bne.n	8003f12 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ece:	4b08      	ldr	r3, [pc, #32]	; (8003ef0 <HAL_RCC_OscConfig+0x2b8>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a07      	ldr	r2, [pc, #28]	; (8003ef0 <HAL_RCC_OscConfig+0x2b8>)
 8003ed4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ed8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003eda:	f7fc ff61 	bl	8000da0 <HAL_GetTick>
 8003ede:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ee0:	e011      	b.n	8003f06 <HAL_RCC_OscConfig+0x2ce>
 8003ee2:	bf00      	nop
 8003ee4:	40023800 	.word	0x40023800
 8003ee8:	42470000 	.word	0x42470000
 8003eec:	42470e80 	.word	0x42470e80
 8003ef0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ef4:	f7fc ff54 	bl	8000da0 <HAL_GetTick>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	2b02      	cmp	r3, #2
 8003f00:	d901      	bls.n	8003f06 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	e106      	b.n	8004114 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f06:	4b85      	ldr	r3, [pc, #532]	; (800411c <HAL_RCC_OscConfig+0x4e4>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d0f0      	beq.n	8003ef4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d106      	bne.n	8003f28 <HAL_RCC_OscConfig+0x2f0>
 8003f1a:	4b81      	ldr	r3, [pc, #516]	; (8004120 <HAL_RCC_OscConfig+0x4e8>)
 8003f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f1e:	4a80      	ldr	r2, [pc, #512]	; (8004120 <HAL_RCC_OscConfig+0x4e8>)
 8003f20:	f043 0301 	orr.w	r3, r3, #1
 8003f24:	6713      	str	r3, [r2, #112]	; 0x70
 8003f26:	e01c      	b.n	8003f62 <HAL_RCC_OscConfig+0x32a>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	2b05      	cmp	r3, #5
 8003f2e:	d10c      	bne.n	8003f4a <HAL_RCC_OscConfig+0x312>
 8003f30:	4b7b      	ldr	r3, [pc, #492]	; (8004120 <HAL_RCC_OscConfig+0x4e8>)
 8003f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f34:	4a7a      	ldr	r2, [pc, #488]	; (8004120 <HAL_RCC_OscConfig+0x4e8>)
 8003f36:	f043 0304 	orr.w	r3, r3, #4
 8003f3a:	6713      	str	r3, [r2, #112]	; 0x70
 8003f3c:	4b78      	ldr	r3, [pc, #480]	; (8004120 <HAL_RCC_OscConfig+0x4e8>)
 8003f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f40:	4a77      	ldr	r2, [pc, #476]	; (8004120 <HAL_RCC_OscConfig+0x4e8>)
 8003f42:	f043 0301 	orr.w	r3, r3, #1
 8003f46:	6713      	str	r3, [r2, #112]	; 0x70
 8003f48:	e00b      	b.n	8003f62 <HAL_RCC_OscConfig+0x32a>
 8003f4a:	4b75      	ldr	r3, [pc, #468]	; (8004120 <HAL_RCC_OscConfig+0x4e8>)
 8003f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f4e:	4a74      	ldr	r2, [pc, #464]	; (8004120 <HAL_RCC_OscConfig+0x4e8>)
 8003f50:	f023 0301 	bic.w	r3, r3, #1
 8003f54:	6713      	str	r3, [r2, #112]	; 0x70
 8003f56:	4b72      	ldr	r3, [pc, #456]	; (8004120 <HAL_RCC_OscConfig+0x4e8>)
 8003f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f5a:	4a71      	ldr	r2, [pc, #452]	; (8004120 <HAL_RCC_OscConfig+0x4e8>)
 8003f5c:	f023 0304 	bic.w	r3, r3, #4
 8003f60:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d015      	beq.n	8003f96 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f6a:	f7fc ff19 	bl	8000da0 <HAL_GetTick>
 8003f6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f70:	e00a      	b.n	8003f88 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f72:	f7fc ff15 	bl	8000da0 <HAL_GetTick>
 8003f76:	4602      	mov	r2, r0
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d901      	bls.n	8003f88 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003f84:	2303      	movs	r3, #3
 8003f86:	e0c5      	b.n	8004114 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f88:	4b65      	ldr	r3, [pc, #404]	; (8004120 <HAL_RCC_OscConfig+0x4e8>)
 8003f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f8c:	f003 0302 	and.w	r3, r3, #2
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d0ee      	beq.n	8003f72 <HAL_RCC_OscConfig+0x33a>
 8003f94:	e014      	b.n	8003fc0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f96:	f7fc ff03 	bl	8000da0 <HAL_GetTick>
 8003f9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f9c:	e00a      	b.n	8003fb4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f9e:	f7fc feff 	bl	8000da0 <HAL_GetTick>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d901      	bls.n	8003fb4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	e0af      	b.n	8004114 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fb4:	4b5a      	ldr	r3, [pc, #360]	; (8004120 <HAL_RCC_OscConfig+0x4e8>)
 8003fb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fb8:	f003 0302 	and.w	r3, r3, #2
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d1ee      	bne.n	8003f9e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003fc0:	7dfb      	ldrb	r3, [r7, #23]
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d105      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fc6:	4b56      	ldr	r3, [pc, #344]	; (8004120 <HAL_RCC_OscConfig+0x4e8>)
 8003fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fca:	4a55      	ldr	r2, [pc, #340]	; (8004120 <HAL_RCC_OscConfig+0x4e8>)
 8003fcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fd0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	699b      	ldr	r3, [r3, #24]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	f000 809b 	beq.w	8004112 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003fdc:	4b50      	ldr	r3, [pc, #320]	; (8004120 <HAL_RCC_OscConfig+0x4e8>)
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	f003 030c 	and.w	r3, r3, #12
 8003fe4:	2b08      	cmp	r3, #8
 8003fe6:	d05c      	beq.n	80040a2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	699b      	ldr	r3, [r3, #24]
 8003fec:	2b02      	cmp	r3, #2
 8003fee:	d141      	bne.n	8004074 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ff0:	4b4c      	ldr	r3, [pc, #304]	; (8004124 <HAL_RCC_OscConfig+0x4ec>)
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ff6:	f7fc fed3 	bl	8000da0 <HAL_GetTick>
 8003ffa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ffc:	e008      	b.n	8004010 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ffe:	f7fc fecf 	bl	8000da0 <HAL_GetTick>
 8004002:	4602      	mov	r2, r0
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	2b02      	cmp	r3, #2
 800400a:	d901      	bls.n	8004010 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800400c:	2303      	movs	r3, #3
 800400e:	e081      	b.n	8004114 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004010:	4b43      	ldr	r3, [pc, #268]	; (8004120 <HAL_RCC_OscConfig+0x4e8>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004018:	2b00      	cmp	r3, #0
 800401a:	d1f0      	bne.n	8003ffe <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	69da      	ldr	r2, [r3, #28]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6a1b      	ldr	r3, [r3, #32]
 8004024:	431a      	orrs	r2, r3
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402a:	019b      	lsls	r3, r3, #6
 800402c:	431a      	orrs	r2, r3
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004032:	085b      	lsrs	r3, r3, #1
 8004034:	3b01      	subs	r3, #1
 8004036:	041b      	lsls	r3, r3, #16
 8004038:	431a      	orrs	r2, r3
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800403e:	061b      	lsls	r3, r3, #24
 8004040:	4937      	ldr	r1, [pc, #220]	; (8004120 <HAL_RCC_OscConfig+0x4e8>)
 8004042:	4313      	orrs	r3, r2
 8004044:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004046:	4b37      	ldr	r3, [pc, #220]	; (8004124 <HAL_RCC_OscConfig+0x4ec>)
 8004048:	2201      	movs	r2, #1
 800404a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800404c:	f7fc fea8 	bl	8000da0 <HAL_GetTick>
 8004050:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004052:	e008      	b.n	8004066 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004054:	f7fc fea4 	bl	8000da0 <HAL_GetTick>
 8004058:	4602      	mov	r2, r0
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	2b02      	cmp	r3, #2
 8004060:	d901      	bls.n	8004066 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	e056      	b.n	8004114 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004066:	4b2e      	ldr	r3, [pc, #184]	; (8004120 <HAL_RCC_OscConfig+0x4e8>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d0f0      	beq.n	8004054 <HAL_RCC_OscConfig+0x41c>
 8004072:	e04e      	b.n	8004112 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004074:	4b2b      	ldr	r3, [pc, #172]	; (8004124 <HAL_RCC_OscConfig+0x4ec>)
 8004076:	2200      	movs	r2, #0
 8004078:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800407a:	f7fc fe91 	bl	8000da0 <HAL_GetTick>
 800407e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004080:	e008      	b.n	8004094 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004082:	f7fc fe8d 	bl	8000da0 <HAL_GetTick>
 8004086:	4602      	mov	r2, r0
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	2b02      	cmp	r3, #2
 800408e:	d901      	bls.n	8004094 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004090:	2303      	movs	r3, #3
 8004092:	e03f      	b.n	8004114 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004094:	4b22      	ldr	r3, [pc, #136]	; (8004120 <HAL_RCC_OscConfig+0x4e8>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800409c:	2b00      	cmp	r3, #0
 800409e:	d1f0      	bne.n	8004082 <HAL_RCC_OscConfig+0x44a>
 80040a0:	e037      	b.n	8004112 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	699b      	ldr	r3, [r3, #24]
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d101      	bne.n	80040ae <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e032      	b.n	8004114 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80040ae:	4b1c      	ldr	r3, [pc, #112]	; (8004120 <HAL_RCC_OscConfig+0x4e8>)
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	699b      	ldr	r3, [r3, #24]
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d028      	beq.n	800410e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d121      	bne.n	800410e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d11a      	bne.n	800410e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040d8:	68fa      	ldr	r2, [r7, #12]
 80040da:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80040de:	4013      	ands	r3, r2
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80040e4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d111      	bne.n	800410e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040f4:	085b      	lsrs	r3, r3, #1
 80040f6:	3b01      	subs	r3, #1
 80040f8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d107      	bne.n	800410e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004108:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800410a:	429a      	cmp	r2, r3
 800410c:	d001      	beq.n	8004112 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e000      	b.n	8004114 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004112:	2300      	movs	r3, #0
}
 8004114:	4618      	mov	r0, r3
 8004116:	3718      	adds	r7, #24
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}
 800411c:	40007000 	.word	0x40007000
 8004120:	40023800 	.word	0x40023800
 8004124:	42470060 	.word	0x42470060

08004128 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d101      	bne.n	800413c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	e0cc      	b.n	80042d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800413c:	4b68      	ldr	r3, [pc, #416]	; (80042e0 <HAL_RCC_ClockConfig+0x1b8>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0307 	and.w	r3, r3, #7
 8004144:	683a      	ldr	r2, [r7, #0]
 8004146:	429a      	cmp	r2, r3
 8004148:	d90c      	bls.n	8004164 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800414a:	4b65      	ldr	r3, [pc, #404]	; (80042e0 <HAL_RCC_ClockConfig+0x1b8>)
 800414c:	683a      	ldr	r2, [r7, #0]
 800414e:	b2d2      	uxtb	r2, r2
 8004150:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004152:	4b63      	ldr	r3, [pc, #396]	; (80042e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0307 	and.w	r3, r3, #7
 800415a:	683a      	ldr	r2, [r7, #0]
 800415c:	429a      	cmp	r2, r3
 800415e:	d001      	beq.n	8004164 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e0b8      	b.n	80042d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0302 	and.w	r3, r3, #2
 800416c:	2b00      	cmp	r3, #0
 800416e:	d020      	beq.n	80041b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0304 	and.w	r3, r3, #4
 8004178:	2b00      	cmp	r3, #0
 800417a:	d005      	beq.n	8004188 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800417c:	4b59      	ldr	r3, [pc, #356]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	4a58      	ldr	r2, [pc, #352]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004182:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004186:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0308 	and.w	r3, r3, #8
 8004190:	2b00      	cmp	r3, #0
 8004192:	d005      	beq.n	80041a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004194:	4b53      	ldr	r3, [pc, #332]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	4a52      	ldr	r2, [pc, #328]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 800419a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800419e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041a0:	4b50      	ldr	r3, [pc, #320]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	494d      	ldr	r1, [pc, #308]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0301 	and.w	r3, r3, #1
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d044      	beq.n	8004248 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d107      	bne.n	80041d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041c6:	4b47      	ldr	r3, [pc, #284]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d119      	bne.n	8004206 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e07f      	b.n	80042d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	2b02      	cmp	r3, #2
 80041dc:	d003      	beq.n	80041e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041e2:	2b03      	cmp	r3, #3
 80041e4:	d107      	bne.n	80041f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041e6:	4b3f      	ldr	r3, [pc, #252]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d109      	bne.n	8004206 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e06f      	b.n	80042d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041f6:	4b3b      	ldr	r3, [pc, #236]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0302 	and.w	r3, r3, #2
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d101      	bne.n	8004206 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e067      	b.n	80042d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004206:	4b37      	ldr	r3, [pc, #220]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	f023 0203 	bic.w	r2, r3, #3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	4934      	ldr	r1, [pc, #208]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004214:	4313      	orrs	r3, r2
 8004216:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004218:	f7fc fdc2 	bl	8000da0 <HAL_GetTick>
 800421c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800421e:	e00a      	b.n	8004236 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004220:	f7fc fdbe 	bl	8000da0 <HAL_GetTick>
 8004224:	4602      	mov	r2, r0
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	f241 3288 	movw	r2, #5000	; 0x1388
 800422e:	4293      	cmp	r3, r2
 8004230:	d901      	bls.n	8004236 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e04f      	b.n	80042d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004236:	4b2b      	ldr	r3, [pc, #172]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	f003 020c 	and.w	r2, r3, #12
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	429a      	cmp	r2, r3
 8004246:	d1eb      	bne.n	8004220 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004248:	4b25      	ldr	r3, [pc, #148]	; (80042e0 <HAL_RCC_ClockConfig+0x1b8>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 0307 	and.w	r3, r3, #7
 8004250:	683a      	ldr	r2, [r7, #0]
 8004252:	429a      	cmp	r2, r3
 8004254:	d20c      	bcs.n	8004270 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004256:	4b22      	ldr	r3, [pc, #136]	; (80042e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004258:	683a      	ldr	r2, [r7, #0]
 800425a:	b2d2      	uxtb	r2, r2
 800425c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800425e:	4b20      	ldr	r3, [pc, #128]	; (80042e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0307 	and.w	r3, r3, #7
 8004266:	683a      	ldr	r2, [r7, #0]
 8004268:	429a      	cmp	r2, r3
 800426a:	d001      	beq.n	8004270 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e032      	b.n	80042d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0304 	and.w	r3, r3, #4
 8004278:	2b00      	cmp	r3, #0
 800427a:	d008      	beq.n	800428e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800427c:	4b19      	ldr	r3, [pc, #100]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	4916      	ldr	r1, [pc, #88]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 800428a:	4313      	orrs	r3, r2
 800428c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0308 	and.w	r3, r3, #8
 8004296:	2b00      	cmp	r3, #0
 8004298:	d009      	beq.n	80042ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800429a:	4b12      	ldr	r3, [pc, #72]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	00db      	lsls	r3, r3, #3
 80042a8:	490e      	ldr	r1, [pc, #56]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 80042aa:	4313      	orrs	r3, r2
 80042ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80042ae:	f000 f821 	bl	80042f4 <HAL_RCC_GetSysClockFreq>
 80042b2:	4602      	mov	r2, r0
 80042b4:	4b0b      	ldr	r3, [pc, #44]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	091b      	lsrs	r3, r3, #4
 80042ba:	f003 030f 	and.w	r3, r3, #15
 80042be:	490a      	ldr	r1, [pc, #40]	; (80042e8 <HAL_RCC_ClockConfig+0x1c0>)
 80042c0:	5ccb      	ldrb	r3, [r1, r3]
 80042c2:	fa22 f303 	lsr.w	r3, r2, r3
 80042c6:	4a09      	ldr	r2, [pc, #36]	; (80042ec <HAL_RCC_ClockConfig+0x1c4>)
 80042c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80042ca:	4b09      	ldr	r3, [pc, #36]	; (80042f0 <HAL_RCC_ClockConfig+0x1c8>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4618      	mov	r0, r3
 80042d0:	f7fc fd22 	bl	8000d18 <HAL_InitTick>

  return HAL_OK;
 80042d4:	2300      	movs	r3, #0
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3710      	adds	r7, #16
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	40023c00 	.word	0x40023c00
 80042e4:	40023800 	.word	0x40023800
 80042e8:	080049bc 	.word	0x080049bc
 80042ec:	20000018 	.word	0x20000018
 80042f0:	2000001c 	.word	0x2000001c

080042f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042f4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80042f8:	b084      	sub	sp, #16
 80042fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80042fc:	2300      	movs	r3, #0
 80042fe:	607b      	str	r3, [r7, #4]
 8004300:	2300      	movs	r3, #0
 8004302:	60fb      	str	r3, [r7, #12]
 8004304:	2300      	movs	r3, #0
 8004306:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004308:	2300      	movs	r3, #0
 800430a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800430c:	4b67      	ldr	r3, [pc, #412]	; (80044ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	f003 030c 	and.w	r3, r3, #12
 8004314:	2b08      	cmp	r3, #8
 8004316:	d00d      	beq.n	8004334 <HAL_RCC_GetSysClockFreq+0x40>
 8004318:	2b08      	cmp	r3, #8
 800431a:	f200 80bd 	bhi.w	8004498 <HAL_RCC_GetSysClockFreq+0x1a4>
 800431e:	2b00      	cmp	r3, #0
 8004320:	d002      	beq.n	8004328 <HAL_RCC_GetSysClockFreq+0x34>
 8004322:	2b04      	cmp	r3, #4
 8004324:	d003      	beq.n	800432e <HAL_RCC_GetSysClockFreq+0x3a>
 8004326:	e0b7      	b.n	8004498 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004328:	4b61      	ldr	r3, [pc, #388]	; (80044b0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800432a:	60bb      	str	r3, [r7, #8]
       break;
 800432c:	e0b7      	b.n	800449e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800432e:	4b61      	ldr	r3, [pc, #388]	; (80044b4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004330:	60bb      	str	r3, [r7, #8]
      break;
 8004332:	e0b4      	b.n	800449e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004334:	4b5d      	ldr	r3, [pc, #372]	; (80044ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800433c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800433e:	4b5b      	ldr	r3, [pc, #364]	; (80044ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004346:	2b00      	cmp	r3, #0
 8004348:	d04d      	beq.n	80043e6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800434a:	4b58      	ldr	r3, [pc, #352]	; (80044ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	099b      	lsrs	r3, r3, #6
 8004350:	461a      	mov	r2, r3
 8004352:	f04f 0300 	mov.w	r3, #0
 8004356:	f240 10ff 	movw	r0, #511	; 0x1ff
 800435a:	f04f 0100 	mov.w	r1, #0
 800435e:	ea02 0800 	and.w	r8, r2, r0
 8004362:	ea03 0901 	and.w	r9, r3, r1
 8004366:	4640      	mov	r0, r8
 8004368:	4649      	mov	r1, r9
 800436a:	f04f 0200 	mov.w	r2, #0
 800436e:	f04f 0300 	mov.w	r3, #0
 8004372:	014b      	lsls	r3, r1, #5
 8004374:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004378:	0142      	lsls	r2, r0, #5
 800437a:	4610      	mov	r0, r2
 800437c:	4619      	mov	r1, r3
 800437e:	ebb0 0008 	subs.w	r0, r0, r8
 8004382:	eb61 0109 	sbc.w	r1, r1, r9
 8004386:	f04f 0200 	mov.w	r2, #0
 800438a:	f04f 0300 	mov.w	r3, #0
 800438e:	018b      	lsls	r3, r1, #6
 8004390:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004394:	0182      	lsls	r2, r0, #6
 8004396:	1a12      	subs	r2, r2, r0
 8004398:	eb63 0301 	sbc.w	r3, r3, r1
 800439c:	f04f 0000 	mov.w	r0, #0
 80043a0:	f04f 0100 	mov.w	r1, #0
 80043a4:	00d9      	lsls	r1, r3, #3
 80043a6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80043aa:	00d0      	lsls	r0, r2, #3
 80043ac:	4602      	mov	r2, r0
 80043ae:	460b      	mov	r3, r1
 80043b0:	eb12 0208 	adds.w	r2, r2, r8
 80043b4:	eb43 0309 	adc.w	r3, r3, r9
 80043b8:	f04f 0000 	mov.w	r0, #0
 80043bc:	f04f 0100 	mov.w	r1, #0
 80043c0:	0259      	lsls	r1, r3, #9
 80043c2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80043c6:	0250      	lsls	r0, r2, #9
 80043c8:	4602      	mov	r2, r0
 80043ca:	460b      	mov	r3, r1
 80043cc:	4610      	mov	r0, r2
 80043ce:	4619      	mov	r1, r3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	461a      	mov	r2, r3
 80043d4:	f04f 0300 	mov.w	r3, #0
 80043d8:	f7fb fefe 	bl	80001d8 <__aeabi_uldivmod>
 80043dc:	4602      	mov	r2, r0
 80043de:	460b      	mov	r3, r1
 80043e0:	4613      	mov	r3, r2
 80043e2:	60fb      	str	r3, [r7, #12]
 80043e4:	e04a      	b.n	800447c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043e6:	4b31      	ldr	r3, [pc, #196]	; (80044ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	099b      	lsrs	r3, r3, #6
 80043ec:	461a      	mov	r2, r3
 80043ee:	f04f 0300 	mov.w	r3, #0
 80043f2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80043f6:	f04f 0100 	mov.w	r1, #0
 80043fa:	ea02 0400 	and.w	r4, r2, r0
 80043fe:	ea03 0501 	and.w	r5, r3, r1
 8004402:	4620      	mov	r0, r4
 8004404:	4629      	mov	r1, r5
 8004406:	f04f 0200 	mov.w	r2, #0
 800440a:	f04f 0300 	mov.w	r3, #0
 800440e:	014b      	lsls	r3, r1, #5
 8004410:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004414:	0142      	lsls	r2, r0, #5
 8004416:	4610      	mov	r0, r2
 8004418:	4619      	mov	r1, r3
 800441a:	1b00      	subs	r0, r0, r4
 800441c:	eb61 0105 	sbc.w	r1, r1, r5
 8004420:	f04f 0200 	mov.w	r2, #0
 8004424:	f04f 0300 	mov.w	r3, #0
 8004428:	018b      	lsls	r3, r1, #6
 800442a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800442e:	0182      	lsls	r2, r0, #6
 8004430:	1a12      	subs	r2, r2, r0
 8004432:	eb63 0301 	sbc.w	r3, r3, r1
 8004436:	f04f 0000 	mov.w	r0, #0
 800443a:	f04f 0100 	mov.w	r1, #0
 800443e:	00d9      	lsls	r1, r3, #3
 8004440:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004444:	00d0      	lsls	r0, r2, #3
 8004446:	4602      	mov	r2, r0
 8004448:	460b      	mov	r3, r1
 800444a:	1912      	adds	r2, r2, r4
 800444c:	eb45 0303 	adc.w	r3, r5, r3
 8004450:	f04f 0000 	mov.w	r0, #0
 8004454:	f04f 0100 	mov.w	r1, #0
 8004458:	0299      	lsls	r1, r3, #10
 800445a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800445e:	0290      	lsls	r0, r2, #10
 8004460:	4602      	mov	r2, r0
 8004462:	460b      	mov	r3, r1
 8004464:	4610      	mov	r0, r2
 8004466:	4619      	mov	r1, r3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	461a      	mov	r2, r3
 800446c:	f04f 0300 	mov.w	r3, #0
 8004470:	f7fb feb2 	bl	80001d8 <__aeabi_uldivmod>
 8004474:	4602      	mov	r2, r0
 8004476:	460b      	mov	r3, r1
 8004478:	4613      	mov	r3, r2
 800447a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800447c:	4b0b      	ldr	r3, [pc, #44]	; (80044ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	0c1b      	lsrs	r3, r3, #16
 8004482:	f003 0303 	and.w	r3, r3, #3
 8004486:	3301      	adds	r3, #1
 8004488:	005b      	lsls	r3, r3, #1
 800448a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800448c:	68fa      	ldr	r2, [r7, #12]
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	fbb2 f3f3 	udiv	r3, r2, r3
 8004494:	60bb      	str	r3, [r7, #8]
      break;
 8004496:	e002      	b.n	800449e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004498:	4b05      	ldr	r3, [pc, #20]	; (80044b0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800449a:	60bb      	str	r3, [r7, #8]
      break;
 800449c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800449e:	68bb      	ldr	r3, [r7, #8]
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3710      	adds	r7, #16
 80044a4:	46bd      	mov	sp, r7
 80044a6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80044aa:	bf00      	nop
 80044ac:	40023800 	.word	0x40023800
 80044b0:	00f42400 	.word	0x00f42400
 80044b4:	007a1200 	.word	0x007a1200

080044b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044b8:	b480      	push	{r7}
 80044ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044bc:	4b03      	ldr	r3, [pc, #12]	; (80044cc <HAL_RCC_GetHCLKFreq+0x14>)
 80044be:	681b      	ldr	r3, [r3, #0]
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	20000018 	.word	0x20000018

080044d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80044d4:	f7ff fff0 	bl	80044b8 <HAL_RCC_GetHCLKFreq>
 80044d8:	4602      	mov	r2, r0
 80044da:	4b05      	ldr	r3, [pc, #20]	; (80044f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	0a9b      	lsrs	r3, r3, #10
 80044e0:	f003 0307 	and.w	r3, r3, #7
 80044e4:	4903      	ldr	r1, [pc, #12]	; (80044f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044e6:	5ccb      	ldrb	r3, [r1, r3]
 80044e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	40023800 	.word	0x40023800
 80044f4:	080049cc 	.word	0x080049cc

080044f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80044fc:	f7ff ffdc 	bl	80044b8 <HAL_RCC_GetHCLKFreq>
 8004500:	4602      	mov	r2, r0
 8004502:	4b05      	ldr	r3, [pc, #20]	; (8004518 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	0b5b      	lsrs	r3, r3, #13
 8004508:	f003 0307 	and.w	r3, r3, #7
 800450c:	4903      	ldr	r1, [pc, #12]	; (800451c <HAL_RCC_GetPCLK2Freq+0x24>)
 800450e:	5ccb      	ldrb	r3, [r1, r3]
 8004510:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004514:	4618      	mov	r0, r3
 8004516:	bd80      	pop	{r7, pc}
 8004518:	40023800 	.word	0x40023800
 800451c:	080049cc 	.word	0x080049cc

08004520 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b082      	sub	sp, #8
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d101      	bne.n	8004532 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e03f      	b.n	80045b2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004538:	b2db      	uxtb	r3, r3
 800453a:	2b00      	cmp	r3, #0
 800453c:	d106      	bne.n	800454c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f7fc fafa 	bl	8000b40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2224      	movs	r2, #36	; 0x24
 8004550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	68da      	ldr	r2, [r3, #12]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004562:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f000 f829 	bl	80045bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	691a      	ldr	r2, [r3, #16]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004578:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	695a      	ldr	r2, [r3, #20]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004588:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	68da      	ldr	r2, [r3, #12]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004598:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2200      	movs	r2, #0
 800459e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2220      	movs	r2, #32
 80045a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2220      	movs	r2, #32
 80045ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3708      	adds	r7, #8
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
	...

080045bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045c0:	b09f      	sub	sp, #124	; 0x7c
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	691b      	ldr	r3, [r3, #16]
 80045cc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80045d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045d2:	68d9      	ldr	r1, [r3, #12]
 80045d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	ea40 0301 	orr.w	r3, r0, r1
 80045dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80045de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045e0:	689a      	ldr	r2, [r3, #8]
 80045e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045e4:	691b      	ldr	r3, [r3, #16]
 80045e6:	431a      	orrs	r2, r3
 80045e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045ea:	695b      	ldr	r3, [r3, #20]
 80045ec:	431a      	orrs	r2, r3
 80045ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045f0:	69db      	ldr	r3, [r3, #28]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80045f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004600:	f021 010c 	bic.w	r1, r1, #12
 8004604:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800460a:	430b      	orrs	r3, r1
 800460c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800460e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	695b      	ldr	r3, [r3, #20]
 8004614:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004618:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800461a:	6999      	ldr	r1, [r3, #24]
 800461c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	ea40 0301 	orr.w	r3, r0, r1
 8004624:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004626:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	4bc5      	ldr	r3, [pc, #788]	; (8004940 <UART_SetConfig+0x384>)
 800462c:	429a      	cmp	r2, r3
 800462e:	d004      	beq.n	800463a <UART_SetConfig+0x7e>
 8004630:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	4bc3      	ldr	r3, [pc, #780]	; (8004944 <UART_SetConfig+0x388>)
 8004636:	429a      	cmp	r2, r3
 8004638:	d103      	bne.n	8004642 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800463a:	f7ff ff5d 	bl	80044f8 <HAL_RCC_GetPCLK2Freq>
 800463e:	6778      	str	r0, [r7, #116]	; 0x74
 8004640:	e002      	b.n	8004648 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004642:	f7ff ff45 	bl	80044d0 <HAL_RCC_GetPCLK1Freq>
 8004646:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004648:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800464a:	69db      	ldr	r3, [r3, #28]
 800464c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004650:	f040 80b6 	bne.w	80047c0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004654:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004656:	461c      	mov	r4, r3
 8004658:	f04f 0500 	mov.w	r5, #0
 800465c:	4622      	mov	r2, r4
 800465e:	462b      	mov	r3, r5
 8004660:	1891      	adds	r1, r2, r2
 8004662:	6439      	str	r1, [r7, #64]	; 0x40
 8004664:	415b      	adcs	r3, r3
 8004666:	647b      	str	r3, [r7, #68]	; 0x44
 8004668:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800466c:	1912      	adds	r2, r2, r4
 800466e:	eb45 0303 	adc.w	r3, r5, r3
 8004672:	f04f 0000 	mov.w	r0, #0
 8004676:	f04f 0100 	mov.w	r1, #0
 800467a:	00d9      	lsls	r1, r3, #3
 800467c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004680:	00d0      	lsls	r0, r2, #3
 8004682:	4602      	mov	r2, r0
 8004684:	460b      	mov	r3, r1
 8004686:	1911      	adds	r1, r2, r4
 8004688:	6639      	str	r1, [r7, #96]	; 0x60
 800468a:	416b      	adcs	r3, r5
 800468c:	667b      	str	r3, [r7, #100]	; 0x64
 800468e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	461a      	mov	r2, r3
 8004694:	f04f 0300 	mov.w	r3, #0
 8004698:	1891      	adds	r1, r2, r2
 800469a:	63b9      	str	r1, [r7, #56]	; 0x38
 800469c:	415b      	adcs	r3, r3
 800469e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80046a4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80046a8:	f7fb fd96 	bl	80001d8 <__aeabi_uldivmod>
 80046ac:	4602      	mov	r2, r0
 80046ae:	460b      	mov	r3, r1
 80046b0:	4ba5      	ldr	r3, [pc, #660]	; (8004948 <UART_SetConfig+0x38c>)
 80046b2:	fba3 2302 	umull	r2, r3, r3, r2
 80046b6:	095b      	lsrs	r3, r3, #5
 80046b8:	011e      	lsls	r6, r3, #4
 80046ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046bc:	461c      	mov	r4, r3
 80046be:	f04f 0500 	mov.w	r5, #0
 80046c2:	4622      	mov	r2, r4
 80046c4:	462b      	mov	r3, r5
 80046c6:	1891      	adds	r1, r2, r2
 80046c8:	6339      	str	r1, [r7, #48]	; 0x30
 80046ca:	415b      	adcs	r3, r3
 80046cc:	637b      	str	r3, [r7, #52]	; 0x34
 80046ce:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80046d2:	1912      	adds	r2, r2, r4
 80046d4:	eb45 0303 	adc.w	r3, r5, r3
 80046d8:	f04f 0000 	mov.w	r0, #0
 80046dc:	f04f 0100 	mov.w	r1, #0
 80046e0:	00d9      	lsls	r1, r3, #3
 80046e2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80046e6:	00d0      	lsls	r0, r2, #3
 80046e8:	4602      	mov	r2, r0
 80046ea:	460b      	mov	r3, r1
 80046ec:	1911      	adds	r1, r2, r4
 80046ee:	65b9      	str	r1, [r7, #88]	; 0x58
 80046f0:	416b      	adcs	r3, r5
 80046f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80046f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	461a      	mov	r2, r3
 80046fa:	f04f 0300 	mov.w	r3, #0
 80046fe:	1891      	adds	r1, r2, r2
 8004700:	62b9      	str	r1, [r7, #40]	; 0x28
 8004702:	415b      	adcs	r3, r3
 8004704:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004706:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800470a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800470e:	f7fb fd63 	bl	80001d8 <__aeabi_uldivmod>
 8004712:	4602      	mov	r2, r0
 8004714:	460b      	mov	r3, r1
 8004716:	4b8c      	ldr	r3, [pc, #560]	; (8004948 <UART_SetConfig+0x38c>)
 8004718:	fba3 1302 	umull	r1, r3, r3, r2
 800471c:	095b      	lsrs	r3, r3, #5
 800471e:	2164      	movs	r1, #100	; 0x64
 8004720:	fb01 f303 	mul.w	r3, r1, r3
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	00db      	lsls	r3, r3, #3
 8004728:	3332      	adds	r3, #50	; 0x32
 800472a:	4a87      	ldr	r2, [pc, #540]	; (8004948 <UART_SetConfig+0x38c>)
 800472c:	fba2 2303 	umull	r2, r3, r2, r3
 8004730:	095b      	lsrs	r3, r3, #5
 8004732:	005b      	lsls	r3, r3, #1
 8004734:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004738:	441e      	add	r6, r3
 800473a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800473c:	4618      	mov	r0, r3
 800473e:	f04f 0100 	mov.w	r1, #0
 8004742:	4602      	mov	r2, r0
 8004744:	460b      	mov	r3, r1
 8004746:	1894      	adds	r4, r2, r2
 8004748:	623c      	str	r4, [r7, #32]
 800474a:	415b      	adcs	r3, r3
 800474c:	627b      	str	r3, [r7, #36]	; 0x24
 800474e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004752:	1812      	adds	r2, r2, r0
 8004754:	eb41 0303 	adc.w	r3, r1, r3
 8004758:	f04f 0400 	mov.w	r4, #0
 800475c:	f04f 0500 	mov.w	r5, #0
 8004760:	00dd      	lsls	r5, r3, #3
 8004762:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004766:	00d4      	lsls	r4, r2, #3
 8004768:	4622      	mov	r2, r4
 800476a:	462b      	mov	r3, r5
 800476c:	1814      	adds	r4, r2, r0
 800476e:	653c      	str	r4, [r7, #80]	; 0x50
 8004770:	414b      	adcs	r3, r1
 8004772:	657b      	str	r3, [r7, #84]	; 0x54
 8004774:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	461a      	mov	r2, r3
 800477a:	f04f 0300 	mov.w	r3, #0
 800477e:	1891      	adds	r1, r2, r2
 8004780:	61b9      	str	r1, [r7, #24]
 8004782:	415b      	adcs	r3, r3
 8004784:	61fb      	str	r3, [r7, #28]
 8004786:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800478a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800478e:	f7fb fd23 	bl	80001d8 <__aeabi_uldivmod>
 8004792:	4602      	mov	r2, r0
 8004794:	460b      	mov	r3, r1
 8004796:	4b6c      	ldr	r3, [pc, #432]	; (8004948 <UART_SetConfig+0x38c>)
 8004798:	fba3 1302 	umull	r1, r3, r3, r2
 800479c:	095b      	lsrs	r3, r3, #5
 800479e:	2164      	movs	r1, #100	; 0x64
 80047a0:	fb01 f303 	mul.w	r3, r1, r3
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	00db      	lsls	r3, r3, #3
 80047a8:	3332      	adds	r3, #50	; 0x32
 80047aa:	4a67      	ldr	r2, [pc, #412]	; (8004948 <UART_SetConfig+0x38c>)
 80047ac:	fba2 2303 	umull	r2, r3, r2, r3
 80047b0:	095b      	lsrs	r3, r3, #5
 80047b2:	f003 0207 	and.w	r2, r3, #7
 80047b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4432      	add	r2, r6
 80047bc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80047be:	e0b9      	b.n	8004934 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80047c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047c2:	461c      	mov	r4, r3
 80047c4:	f04f 0500 	mov.w	r5, #0
 80047c8:	4622      	mov	r2, r4
 80047ca:	462b      	mov	r3, r5
 80047cc:	1891      	adds	r1, r2, r2
 80047ce:	6139      	str	r1, [r7, #16]
 80047d0:	415b      	adcs	r3, r3
 80047d2:	617b      	str	r3, [r7, #20]
 80047d4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80047d8:	1912      	adds	r2, r2, r4
 80047da:	eb45 0303 	adc.w	r3, r5, r3
 80047de:	f04f 0000 	mov.w	r0, #0
 80047e2:	f04f 0100 	mov.w	r1, #0
 80047e6:	00d9      	lsls	r1, r3, #3
 80047e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80047ec:	00d0      	lsls	r0, r2, #3
 80047ee:	4602      	mov	r2, r0
 80047f0:	460b      	mov	r3, r1
 80047f2:	eb12 0804 	adds.w	r8, r2, r4
 80047f6:	eb43 0905 	adc.w	r9, r3, r5
 80047fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	4618      	mov	r0, r3
 8004800:	f04f 0100 	mov.w	r1, #0
 8004804:	f04f 0200 	mov.w	r2, #0
 8004808:	f04f 0300 	mov.w	r3, #0
 800480c:	008b      	lsls	r3, r1, #2
 800480e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004812:	0082      	lsls	r2, r0, #2
 8004814:	4640      	mov	r0, r8
 8004816:	4649      	mov	r1, r9
 8004818:	f7fb fcde 	bl	80001d8 <__aeabi_uldivmod>
 800481c:	4602      	mov	r2, r0
 800481e:	460b      	mov	r3, r1
 8004820:	4b49      	ldr	r3, [pc, #292]	; (8004948 <UART_SetConfig+0x38c>)
 8004822:	fba3 2302 	umull	r2, r3, r3, r2
 8004826:	095b      	lsrs	r3, r3, #5
 8004828:	011e      	lsls	r6, r3, #4
 800482a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800482c:	4618      	mov	r0, r3
 800482e:	f04f 0100 	mov.w	r1, #0
 8004832:	4602      	mov	r2, r0
 8004834:	460b      	mov	r3, r1
 8004836:	1894      	adds	r4, r2, r2
 8004838:	60bc      	str	r4, [r7, #8]
 800483a:	415b      	adcs	r3, r3
 800483c:	60fb      	str	r3, [r7, #12]
 800483e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004842:	1812      	adds	r2, r2, r0
 8004844:	eb41 0303 	adc.w	r3, r1, r3
 8004848:	f04f 0400 	mov.w	r4, #0
 800484c:	f04f 0500 	mov.w	r5, #0
 8004850:	00dd      	lsls	r5, r3, #3
 8004852:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004856:	00d4      	lsls	r4, r2, #3
 8004858:	4622      	mov	r2, r4
 800485a:	462b      	mov	r3, r5
 800485c:	1814      	adds	r4, r2, r0
 800485e:	64bc      	str	r4, [r7, #72]	; 0x48
 8004860:	414b      	adcs	r3, r1
 8004862:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004864:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	4618      	mov	r0, r3
 800486a:	f04f 0100 	mov.w	r1, #0
 800486e:	f04f 0200 	mov.w	r2, #0
 8004872:	f04f 0300 	mov.w	r3, #0
 8004876:	008b      	lsls	r3, r1, #2
 8004878:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800487c:	0082      	lsls	r2, r0, #2
 800487e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004882:	f7fb fca9 	bl	80001d8 <__aeabi_uldivmod>
 8004886:	4602      	mov	r2, r0
 8004888:	460b      	mov	r3, r1
 800488a:	4b2f      	ldr	r3, [pc, #188]	; (8004948 <UART_SetConfig+0x38c>)
 800488c:	fba3 1302 	umull	r1, r3, r3, r2
 8004890:	095b      	lsrs	r3, r3, #5
 8004892:	2164      	movs	r1, #100	; 0x64
 8004894:	fb01 f303 	mul.w	r3, r1, r3
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	011b      	lsls	r3, r3, #4
 800489c:	3332      	adds	r3, #50	; 0x32
 800489e:	4a2a      	ldr	r2, [pc, #168]	; (8004948 <UART_SetConfig+0x38c>)
 80048a0:	fba2 2303 	umull	r2, r3, r2, r3
 80048a4:	095b      	lsrs	r3, r3, #5
 80048a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048aa:	441e      	add	r6, r3
 80048ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048ae:	4618      	mov	r0, r3
 80048b0:	f04f 0100 	mov.w	r1, #0
 80048b4:	4602      	mov	r2, r0
 80048b6:	460b      	mov	r3, r1
 80048b8:	1894      	adds	r4, r2, r2
 80048ba:	603c      	str	r4, [r7, #0]
 80048bc:	415b      	adcs	r3, r3
 80048be:	607b      	str	r3, [r7, #4]
 80048c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048c4:	1812      	adds	r2, r2, r0
 80048c6:	eb41 0303 	adc.w	r3, r1, r3
 80048ca:	f04f 0400 	mov.w	r4, #0
 80048ce:	f04f 0500 	mov.w	r5, #0
 80048d2:	00dd      	lsls	r5, r3, #3
 80048d4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80048d8:	00d4      	lsls	r4, r2, #3
 80048da:	4622      	mov	r2, r4
 80048dc:	462b      	mov	r3, r5
 80048de:	eb12 0a00 	adds.w	sl, r2, r0
 80048e2:	eb43 0b01 	adc.w	fp, r3, r1
 80048e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	4618      	mov	r0, r3
 80048ec:	f04f 0100 	mov.w	r1, #0
 80048f0:	f04f 0200 	mov.w	r2, #0
 80048f4:	f04f 0300 	mov.w	r3, #0
 80048f8:	008b      	lsls	r3, r1, #2
 80048fa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80048fe:	0082      	lsls	r2, r0, #2
 8004900:	4650      	mov	r0, sl
 8004902:	4659      	mov	r1, fp
 8004904:	f7fb fc68 	bl	80001d8 <__aeabi_uldivmod>
 8004908:	4602      	mov	r2, r0
 800490a:	460b      	mov	r3, r1
 800490c:	4b0e      	ldr	r3, [pc, #56]	; (8004948 <UART_SetConfig+0x38c>)
 800490e:	fba3 1302 	umull	r1, r3, r3, r2
 8004912:	095b      	lsrs	r3, r3, #5
 8004914:	2164      	movs	r1, #100	; 0x64
 8004916:	fb01 f303 	mul.w	r3, r1, r3
 800491a:	1ad3      	subs	r3, r2, r3
 800491c:	011b      	lsls	r3, r3, #4
 800491e:	3332      	adds	r3, #50	; 0x32
 8004920:	4a09      	ldr	r2, [pc, #36]	; (8004948 <UART_SetConfig+0x38c>)
 8004922:	fba2 2303 	umull	r2, r3, r2, r3
 8004926:	095b      	lsrs	r3, r3, #5
 8004928:	f003 020f 	and.w	r2, r3, #15
 800492c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4432      	add	r2, r6
 8004932:	609a      	str	r2, [r3, #8]
}
 8004934:	bf00      	nop
 8004936:	377c      	adds	r7, #124	; 0x7c
 8004938:	46bd      	mov	sp, r7
 800493a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800493e:	bf00      	nop
 8004940:	40011000 	.word	0x40011000
 8004944:	40011400 	.word	0x40011400
 8004948:	51eb851f 	.word	0x51eb851f

0800494c <__libc_init_array>:
 800494c:	b570      	push	{r4, r5, r6, lr}
 800494e:	4d0d      	ldr	r5, [pc, #52]	; (8004984 <__libc_init_array+0x38>)
 8004950:	4c0d      	ldr	r4, [pc, #52]	; (8004988 <__libc_init_array+0x3c>)
 8004952:	1b64      	subs	r4, r4, r5
 8004954:	10a4      	asrs	r4, r4, #2
 8004956:	2600      	movs	r6, #0
 8004958:	42a6      	cmp	r6, r4
 800495a:	d109      	bne.n	8004970 <__libc_init_array+0x24>
 800495c:	4d0b      	ldr	r5, [pc, #44]	; (800498c <__libc_init_array+0x40>)
 800495e:	4c0c      	ldr	r4, [pc, #48]	; (8004990 <__libc_init_array+0x44>)
 8004960:	f000 f820 	bl	80049a4 <_init>
 8004964:	1b64      	subs	r4, r4, r5
 8004966:	10a4      	asrs	r4, r4, #2
 8004968:	2600      	movs	r6, #0
 800496a:	42a6      	cmp	r6, r4
 800496c:	d105      	bne.n	800497a <__libc_init_array+0x2e>
 800496e:	bd70      	pop	{r4, r5, r6, pc}
 8004970:	f855 3b04 	ldr.w	r3, [r5], #4
 8004974:	4798      	blx	r3
 8004976:	3601      	adds	r6, #1
 8004978:	e7ee      	b.n	8004958 <__libc_init_array+0xc>
 800497a:	f855 3b04 	ldr.w	r3, [r5], #4
 800497e:	4798      	blx	r3
 8004980:	3601      	adds	r6, #1
 8004982:	e7f2      	b.n	800496a <__libc_init_array+0x1e>
 8004984:	080049dc 	.word	0x080049dc
 8004988:	080049dc 	.word	0x080049dc
 800498c:	080049dc 	.word	0x080049dc
 8004990:	080049e0 	.word	0x080049e0

08004994 <memset>:
 8004994:	4402      	add	r2, r0
 8004996:	4603      	mov	r3, r0
 8004998:	4293      	cmp	r3, r2
 800499a:	d100      	bne.n	800499e <memset+0xa>
 800499c:	4770      	bx	lr
 800499e:	f803 1b01 	strb.w	r1, [r3], #1
 80049a2:	e7f9      	b.n	8004998 <memset+0x4>

080049a4 <_init>:
 80049a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049a6:	bf00      	nop
 80049a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049aa:	bc08      	pop	{r3}
 80049ac:	469e      	mov	lr, r3
 80049ae:	4770      	bx	lr

080049b0 <_fini>:
 80049b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049b2:	bf00      	nop
 80049b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049b6:	bc08      	pop	{r3}
 80049b8:	469e      	mov	lr, r3
 80049ba:	4770      	bx	lr
